//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AutomationAgent.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/AutomationService")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IBOTService")]
    public interface IBOTService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddSchedule", ReplyAction="http://tempuri.org/IBOTService/AddScheduleResponse")]
        int AddSchedule(string strQueueName, string strBotName, string strChronExp, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddSchedule", ReplyAction="http://tempuri.org/IBOTService/AddScheduleResponse")]
        System.Threading.Tasks.Task<int> AddScheduleAsync(string strQueueName, string strBotName, string strChronExp, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteSchedule", ReplyAction="http://tempuri.org/IBOTService/DeleteScheduleResponse")]
        int DeleteSchedule(string strId, string strQueueName, string strBotName, string strChronExp, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteSchedule", ReplyAction="http://tempuri.org/IBOTService/DeleteScheduleResponse")]
        System.Threading.Tasks.Task<int> DeleteScheduleAsync(string strId, string strQueueName, string strBotName, string strChronExp, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetSchedules", ReplyAction="http://tempuri.org/IBOTService/GetSchedulesResponse")]
        System.Data.DataTable GetSchedules(int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetSchedules", ReplyAction="http://tempuri.org/IBOTService/GetSchedulesResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetSchedulesAsync(int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AutomationRequest", ReplyAction="http://tempuri.org/IBOTService/AutomationRequestResponse")]
        bool AutomationRequest(CommonLibrary.RequestInput _requestInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AutomationRequest", ReplyAction="http://tempuri.org/IBOTService/AutomationRequestResponse")]
        System.Threading.Tasks.Task<bool> AutomationRequestAsync(CommonLibrary.RequestInput _requestInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddUser", ReplyAction="http://tempuri.org/IBOTService/AddUserResponse")]
        int AddUser(string domainname, string userid, string pwd, int tenantid, int roletypeid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddUser", ReplyAction="http://tempuri.org/IBOTService/AddUserResponse")]
        System.Threading.Tasks.Task<int> AddUserAsync(string domainname, string userid, string pwd, int tenantid, int roletypeid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/UpdateDefaultVersion", ReplyAction="http://tempuri.org/IBOTService/UpdateDefaultVersionResponse")]
        int UpdateDefaultVersion(int iTenantId, string ProcessId, string updatedVersion, bool isLatest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/UpdateDefaultVersion", ReplyAction="http://tempuri.org/IBOTService/UpdateDefaultVersionResponse")]
        System.Threading.Tasks.Task<int> UpdateDefaultVersionAsync(int iTenantId, string ProcessId, string updatedVersion, bool isLatest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddProcess", ReplyAction="http://tempuri.org/IBOTService/AddProcessResponse")]
        int AddProcess(string ProcessName, int EnvironmentName, int tenantid, string ProcessVersion, bool latestVersion, string createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddProcess", ReplyAction="http://tempuri.org/IBOTService/AddProcessResponse")]
        System.Threading.Tasks.Task<int> AddProcessAsync(string ProcessName, int EnvironmentName, int tenantid, string ProcessVersion, bool latestVersion, string createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddProcessWithZip", ReplyAction="http://tempuri.org/IBOTService/AddProcessWithZipResponse")]
        int AddProcessWithZip(string ProcessName, int EnvironmentName, int TenantId, string ProcessVersion, bool LatestVersion, string createdBy, byte[] ZipDataFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddProcessWithZip", ReplyAction="http://tempuri.org/IBOTService/AddProcessWithZipResponse")]
        System.Threading.Tasks.Task<int> AddProcessWithZipAsync(string ProcessName, int EnvironmentName, int TenantId, string ProcessVersion, bool LatestVersion, string createdBy, byte[] ZipDataFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddBot", ReplyAction="http://tempuri.org/IBOTService/AddBotResponse")]
        int AddBot(string strBotName, string strBotId, string pwd, string botkey, string strMachineName, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddBot", ReplyAction="http://tempuri.org/IBOTService/AddBotResponse")]
        System.Threading.Tasks.Task<int> AddBotAsync(string strBotName, string strBotId, string pwd, string botkey, string strMachineName, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddConfigParameters", ReplyAction="http://tempuri.org/IBOTService/AddConfigParametersResponse")]
        int AddConfigParameters(string strParameterName, string strParameterValue, int iAccessLevelProcessId, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddConfigParameters", ReplyAction="http://tempuri.org/IBOTService/AddConfigParametersResponse")]
        System.Threading.Tasks.Task<int> AddConfigParametersAsync(string strParameterName, string strParameterValue, int iAccessLevelProcessId, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteConfigParameters", ReplyAction="http://tempuri.org/IBOTService/DeleteConfigParametersResponse")]
        int DeleteConfigParameters(int iParameterId, int tenantid, string strCurrentUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteConfigParameters", ReplyAction="http://tempuri.org/IBOTService/DeleteConfigParametersResponse")]
        System.Threading.Tasks.Task<int> DeleteConfigParametersAsync(int iParameterId, int tenantid, string strCurrentUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteBot", ReplyAction="http://tempuri.org/IBOTService/DeleteBotResponse")]
        int DeleteBot(string strId, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteBot", ReplyAction="http://tempuri.org/IBOTService/DeleteBotResponse")]
        System.Threading.Tasks.Task<int> DeleteBotAsync(string strId, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteUser", ReplyAction="http://tempuri.org/IBOTService/DeleteUserResponse")]
        int DeleteUser(string strId, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteUser", ReplyAction="http://tempuri.org/IBOTService/DeleteUserResponse")]
        System.Threading.Tasks.Task<int> DeleteUserAsync(string strId, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteProcess", ReplyAction="http://tempuri.org/IBOTService/DeleteProcessResponse")]
        int DeleteProcess(string strId, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteProcess", ReplyAction="http://tempuri.org/IBOTService/DeleteProcessResponse")]
        System.Threading.Tasks.Task<int> DeleteProcessAsync(string strId, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteQueueToBotMapping", ReplyAction="http://tempuri.org/IBOTService/DeleteQueueToBotMappingResponse")]
        int DeleteQueueToBotMapping(string strBotId, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteQueueToBotMapping", ReplyAction="http://tempuri.org/IBOTService/DeleteQueueToBotMappingResponse")]
        System.Threading.Tasks.Task<int> DeleteQueueToBotMappingAsync(string strBotId, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteUserToBotMapping", ReplyAction="http://tempuri.org/IBOTService/DeleteUserToBotMappingResponse")]
        int DeleteUserToBotMapping(string strId, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteUserToBotMapping", ReplyAction="http://tempuri.org/IBOTService/DeleteUserToBotMappingResponse")]
        System.Threading.Tasks.Task<int> DeleteUserToBotMappingAsync(string strId, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/LoginUser", ReplyAction="http://tempuri.org/IBOTService/LoginUserResponse")]
        int LoginUser(string domainname, string userid, string pwd, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/LoginUser", ReplyAction="http://tempuri.org/IBOTService/LoginUserResponse")]
        System.Threading.Tasks.Task<int> LoginUserAsync(string domainname, string userid, string pwd, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AssignBotToUser", ReplyAction="http://tempuri.org/IBOTService/AssignBotToUserResponse")]
        int AssignBotToUser(string strBotId, string strUserId, string createdby, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AssignBotToUser", ReplyAction="http://tempuri.org/IBOTService/AssignBotToUserResponse")]
        System.Threading.Tasks.Task<int> AssignBotToUserAsync(string strBotId, string strUserId, string createdby, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AssignQueueToBot", ReplyAction="http://tempuri.org/IBOTService/AssignQueueToBotResponse")]
        int AssignQueueToBot(string strBotId, string queuename, string createdby, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AssignQueueToBot", ReplyAction="http://tempuri.org/IBOTService/AssignQueueToBotResponse")]
        System.Threading.Tasks.Task<int> AssignQueueToBotAsync(string strBotId, string queuename, string createdby, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetBots", ReplyAction="http://tempuri.org/IBOTService/GetBotsResponse")]
        System.Data.DataTable GetBots(int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetBots", ReplyAction="http://tempuri.org/IBOTService/GetBotsResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetBotsAsync(int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetConfigParameters", ReplyAction="http://tempuri.org/IBOTService/GetConfigParametersResponse")]
        System.Data.DataTable GetConfigParameters(int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetConfigParameters", ReplyAction="http://tempuri.org/IBOTService/GetConfigParametersResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetConfigParametersAsync(int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetQueues", ReplyAction="http://tempuri.org/IBOTService/GetQueuesResponse")]
        System.Data.DataTable GetQueues(int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetQueues", ReplyAction="http://tempuri.org/IBOTService/GetQueuesResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetQueuesAsync(int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetDashboardBots", ReplyAction="http://tempuri.org/IBOTService/GetDashboardBotsResponse")]
        System.Data.DataTable GetDashboardBots(int tenantid, string userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetDashboardBots", ReplyAction="http://tempuri.org/IBOTService/GetDashboardBotsResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetDashboardBotsAsync(int tenantid, string userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetQueueToBotMapping", ReplyAction="http://tempuri.org/IBOTService/GetQueueToBotMappingResponse")]
        System.Data.DataTable GetQueueToBotMapping(int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetQueueToBotMapping", ReplyAction="http://tempuri.org/IBOTService/GetQueueToBotMappingResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetQueueToBotMappingAsync(int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetUserToBotMapping", ReplyAction="http://tempuri.org/IBOTService/GetUserToBotMappingResponse")]
        System.Data.DataTable GetUserToBotMapping(string userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetUserToBotMapping", ReplyAction="http://tempuri.org/IBOTService/GetUserToBotMappingResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetUserToBotMappingAsync(string userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetBotStartDetails", ReplyAction="http://tempuri.org/IBOTService/GetBotStartDetailsResponse")]
        System.Data.DataTable GetBotStartDetails(string botname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetBotStartDetails", ReplyAction="http://tempuri.org/IBOTService/GetBotStartDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetBotStartDetailsAsync(string botname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetBotStartDetailsFromDesktop", ReplyAction="http://tempuri.org/IBOTService/GetBotStartDetailsFromDesktopResponse")]
        System.Data.DataTable GetBotStartDetailsFromDesktop(string userid, string machinename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetBotStartDetailsFromDesktop", ReplyAction="http://tempuri.org/IBOTService/GetBotStartDetailsFromDesktopResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetBotStartDetailsFromDesktopAsync(string userid, string machinename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetStompDetails", ReplyAction="http://tempuri.org/IBOTService/GetStompDetailsResponse")]
        System.Data.DataTable GetStompDetails(string botid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetStompDetails", ReplyAction="http://tempuri.org/IBOTService/GetStompDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetStompDetailsAsync(string botid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetRQDetails", ReplyAction="http://tempuri.org/IBOTService/GetRQDetailsResponse")]
        System.Data.DataTable GetRQDetails(string botid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetRQDetails", ReplyAction="http://tempuri.org/IBOTService/GetRQDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetRQDetailsAsync(string botid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetUsers", ReplyAction="http://tempuri.org/IBOTService/GetUsersResponse")]
        System.Data.DataTable GetUsers(int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetUsers", ReplyAction="http://tempuri.org/IBOTService/GetUsersResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetUsersAsync(int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetLog", ReplyAction="http://tempuri.org/IBOTService/GetLogResponse")]
        System.Data.DataTable GetLog(string userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetLog", ReplyAction="http://tempuri.org/IBOTService/GetLogResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetLogAsync(string userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetAuditTrail", ReplyAction="http://tempuri.org/IBOTService/GetAuditTrailResponse")]
        System.Data.DataTable GetAuditTrail(int tenantid, string userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetAuditTrail", ReplyAction="http://tempuri.org/IBOTService/GetAuditTrailResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetAuditTrailAsync(int tenantid, string userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetData", ReplyAction="http://tempuri.org/IBOTService/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetData", ReplyAction="http://tempuri.org/IBOTService/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IBOTService/GetDataUsingDataContractResponse")]
        AutomationAgent.ServiceReference1.CompositeType GetDataUsingDataContract(AutomationAgent.ServiceReference1.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IBOTService/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<AutomationAgent.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(AutomationAgent.ServiceReference1.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/LogDataToDB", ReplyAction="http://tempuri.org/IBOTService/LogDataToDBResponse")]
        void LogDataToDB(System.Data.DataTable LogData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/LogDataToDB", ReplyAction="http://tempuri.org/IBOTService/LogDataToDBResponse")]
        System.Threading.Tasks.Task LogDataToDBAsync(System.Data.DataTable LogData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/PublishProcess", ReplyAction="http://tempuri.org/IBOTService/PublishProcessResponse")]
        bool PublishProcess(CommonLibrary.PublishProcessEntity publishProcessEntity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/PublishProcess", ReplyAction="http://tempuri.org/IBOTService/PublishProcessResponse")]
        System.Threading.Tasks.Task<bool> PublishProcessAsync(CommonLibrary.PublishProcessEntity publishProcessEntity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetProcessDetails", ReplyAction="http://tempuri.org/IBOTService/GetProcessDetailsResponse")]
        System.Data.DataTable GetProcessDetails(string ProcessName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetProcessDetails", ReplyAction="http://tempuri.org/IBOTService/GetProcessDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetProcessDetailsAsync(string ProcessName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DownloadAutomationZipBinary", ReplyAction="http://tempuri.org/IBOTService/DownloadAutomationZipBinaryResponse")]
        System.Data.DataTable DownloadAutomationZipBinary(string ProcessName, string ProcessVersion, string AutomationGroupName, string TenantName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DownloadAutomationZipBinary", ReplyAction="http://tempuri.org/IBOTService/DownloadAutomationZipBinaryResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> DownloadAutomationZipBinaryAsync(string ProcessName, string ProcessVersion, string AutomationGroupName, string TenantName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetProcessDataWitoutZipFile", ReplyAction="http://tempuri.org/IBOTService/GetProcessDataWitoutZipFileResponse")]
        System.Data.DataTable GetProcessDataWitoutZipFile(int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetProcessDataWitoutZipFile", ReplyAction="http://tempuri.org/IBOTService/GetProcessDataWitoutZipFileResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetProcessDataWitoutZipFileAsync(int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/LoadProcessVersion", ReplyAction="http://tempuri.org/IBOTService/LoadProcessVersionResponse")]
        System.Data.DataTable LoadProcessVersion(int tenantid, string ProcessId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/LoadProcessVersion", ReplyAction="http://tempuri.org/IBOTService/LoadProcessVersionResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> LoadProcessVersionAsync(int tenantid, string ProcessId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBOTServiceChannel : AutomationAgent.ServiceReference1.IBOTService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BOTServiceClient : System.ServiceModel.ClientBase<AutomationAgent.ServiceReference1.IBOTService>, AutomationAgent.ServiceReference1.IBOTService {
        
        public BOTServiceClient() {
        }
        
        public BOTServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BOTServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BOTServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BOTServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int AddSchedule(string strQueueName, string strBotName, string strChronExp, int tenantid, string createdby) {
            return base.Channel.AddSchedule(strQueueName, strBotName, strChronExp, tenantid, createdby);
        }
        
        public System.Threading.Tasks.Task<int> AddScheduleAsync(string strQueueName, string strBotName, string strChronExp, int tenantid, string createdby) {
            return base.Channel.AddScheduleAsync(strQueueName, strBotName, strChronExp, tenantid, createdby);
        }
        
        public int DeleteSchedule(string strId, string strQueueName, string strBotName, string strChronExp, int tenantid, string createdby) {
            return base.Channel.DeleteSchedule(strId, strQueueName, strBotName, strChronExp, tenantid, createdby);
        }
        
        public System.Threading.Tasks.Task<int> DeleteScheduleAsync(string strId, string strQueueName, string strBotName, string strChronExp, int tenantid, string createdby) {
            return base.Channel.DeleteScheduleAsync(strId, strQueueName, strBotName, strChronExp, tenantid, createdby);
        }
        
        public System.Data.DataTable GetSchedules(int tenantid) {
            return base.Channel.GetSchedules(tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetSchedulesAsync(int tenantid) {
            return base.Channel.GetSchedulesAsync(tenantid);
        }
        
        public bool AutomationRequest(CommonLibrary.RequestInput _requestInput) {
            return base.Channel.AutomationRequest(_requestInput);
        }
        
        public System.Threading.Tasks.Task<bool> AutomationRequestAsync(CommonLibrary.RequestInput _requestInput) {
            return base.Channel.AutomationRequestAsync(_requestInput);
        }
        
        public int AddUser(string domainname, string userid, string pwd, int tenantid, int roletypeid, string createdby) {
            return base.Channel.AddUser(domainname, userid, pwd, tenantid, roletypeid, createdby);
        }
        
        public System.Threading.Tasks.Task<int> AddUserAsync(string domainname, string userid, string pwd, int tenantid, int roletypeid, string createdby) {
            return base.Channel.AddUserAsync(domainname, userid, pwd, tenantid, roletypeid, createdby);
        }
        
        public int UpdateDefaultVersion(int iTenantId, string ProcessId, string updatedVersion, bool isLatest) {
            return base.Channel.UpdateDefaultVersion(iTenantId, ProcessId, updatedVersion, isLatest);
        }
        
        public System.Threading.Tasks.Task<int> UpdateDefaultVersionAsync(int iTenantId, string ProcessId, string updatedVersion, bool isLatest) {
            return base.Channel.UpdateDefaultVersionAsync(iTenantId, ProcessId, updatedVersion, isLatest);
        }
        
        public int AddProcess(string ProcessName, int EnvironmentName, int tenantid, string ProcessVersion, bool latestVersion, string createdBy) {
            return base.Channel.AddProcess(ProcessName, EnvironmentName, tenantid, ProcessVersion, latestVersion, createdBy);
        }
        
        public System.Threading.Tasks.Task<int> AddProcessAsync(string ProcessName, int EnvironmentName, int tenantid, string ProcessVersion, bool latestVersion, string createdBy) {
            return base.Channel.AddProcessAsync(ProcessName, EnvironmentName, tenantid, ProcessVersion, latestVersion, createdBy);
        }
        
        public int AddProcessWithZip(string ProcessName, int EnvironmentName, int TenantId, string ProcessVersion, bool LatestVersion, string createdBy, byte[] ZipDataFile) {
            return base.Channel.AddProcessWithZip(ProcessName, EnvironmentName, TenantId, ProcessVersion, LatestVersion, createdBy, ZipDataFile);
        }
        
        public System.Threading.Tasks.Task<int> AddProcessWithZipAsync(string ProcessName, int EnvironmentName, int TenantId, string ProcessVersion, bool LatestVersion, string createdBy, byte[] ZipDataFile) {
            return base.Channel.AddProcessWithZipAsync(ProcessName, EnvironmentName, TenantId, ProcessVersion, LatestVersion, createdBy, ZipDataFile);
        }
        
        public int AddBot(string strBotName, string strBotId, string pwd, string botkey, string strMachineName, int tenantid, string createdby) {
            return base.Channel.AddBot(strBotName, strBotId, pwd, botkey, strMachineName, tenantid, createdby);
        }
        
        public System.Threading.Tasks.Task<int> AddBotAsync(string strBotName, string strBotId, string pwd, string botkey, string strMachineName, int tenantid, string createdby) {
            return base.Channel.AddBotAsync(strBotName, strBotId, pwd, botkey, strMachineName, tenantid, createdby);
        }
        
        public int AddConfigParameters(string strParameterName, string strParameterValue, int iAccessLevelProcessId, int tenantid, string createdby) {
            return base.Channel.AddConfigParameters(strParameterName, strParameterValue, iAccessLevelProcessId, tenantid, createdby);
        }
        
        public System.Threading.Tasks.Task<int> AddConfigParametersAsync(string strParameterName, string strParameterValue, int iAccessLevelProcessId, int tenantid, string createdby) {
            return base.Channel.AddConfigParametersAsync(strParameterName, strParameterValue, iAccessLevelProcessId, tenantid, createdby);
        }
        
        public int DeleteConfigParameters(int iParameterId, int tenantid, string strCurrentUser) {
            return base.Channel.DeleteConfigParameters(iParameterId, tenantid, strCurrentUser);
        }
        
        public System.Threading.Tasks.Task<int> DeleteConfigParametersAsync(int iParameterId, int tenantid, string strCurrentUser) {
            return base.Channel.DeleteConfigParametersAsync(iParameterId, tenantid, strCurrentUser);
        }
        
        public int DeleteBot(string strId, int tenantid, string createdby) {
            return base.Channel.DeleteBot(strId, tenantid, createdby);
        }
        
        public System.Threading.Tasks.Task<int> DeleteBotAsync(string strId, int tenantid, string createdby) {
            return base.Channel.DeleteBotAsync(strId, tenantid, createdby);
        }
        
        public int DeleteUser(string strId, int tenantid, string createdby) {
            return base.Channel.DeleteUser(strId, tenantid, createdby);
        }
        
        public System.Threading.Tasks.Task<int> DeleteUserAsync(string strId, int tenantid, string createdby) {
            return base.Channel.DeleteUserAsync(strId, tenantid, createdby);
        }
        
        public int DeleteProcess(string strId, int tenantid, string createdby) {
            return base.Channel.DeleteProcess(strId, tenantid, createdby);
        }
        
        public System.Threading.Tasks.Task<int> DeleteProcessAsync(string strId, int tenantid, string createdby) {
            return base.Channel.DeleteProcessAsync(strId, tenantid, createdby);
        }
        
        public int DeleteQueueToBotMapping(string strBotId, int tenantid, string createdby) {
            return base.Channel.DeleteQueueToBotMapping(strBotId, tenantid, createdby);
        }
        
        public System.Threading.Tasks.Task<int> DeleteQueueToBotMappingAsync(string strBotId, int tenantid, string createdby) {
            return base.Channel.DeleteQueueToBotMappingAsync(strBotId, tenantid, createdby);
        }
        
        public int DeleteUserToBotMapping(string strId, int tenantid, string createdby) {
            return base.Channel.DeleteUserToBotMapping(strId, tenantid, createdby);
        }
        
        public System.Threading.Tasks.Task<int> DeleteUserToBotMappingAsync(string strId, int tenantid, string createdby) {
            return base.Channel.DeleteUserToBotMappingAsync(strId, tenantid, createdby);
        }
        
        public int LoginUser(string domainname, string userid, string pwd, int tenantid) {
            return base.Channel.LoginUser(domainname, userid, pwd, tenantid);
        }
        
        public System.Threading.Tasks.Task<int> LoginUserAsync(string domainname, string userid, string pwd, int tenantid) {
            return base.Channel.LoginUserAsync(domainname, userid, pwd, tenantid);
        }
        
        public int AssignBotToUser(string strBotId, string strUserId, string createdby, int tenantid) {
            return base.Channel.AssignBotToUser(strBotId, strUserId, createdby, tenantid);
        }
        
        public System.Threading.Tasks.Task<int> AssignBotToUserAsync(string strBotId, string strUserId, string createdby, int tenantid) {
            return base.Channel.AssignBotToUserAsync(strBotId, strUserId, createdby, tenantid);
        }
        
        public int AssignQueueToBot(string strBotId, string queuename, string createdby, int tenantid) {
            return base.Channel.AssignQueueToBot(strBotId, queuename, createdby, tenantid);
        }
        
        public System.Threading.Tasks.Task<int> AssignQueueToBotAsync(string strBotId, string queuename, string createdby, int tenantid) {
            return base.Channel.AssignQueueToBotAsync(strBotId, queuename, createdby, tenantid);
        }
        
        public System.Data.DataTable GetBots(int tenantid) {
            return base.Channel.GetBots(tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetBotsAsync(int tenantid) {
            return base.Channel.GetBotsAsync(tenantid);
        }
        
        public System.Data.DataTable GetConfigParameters(int tenantid) {
            return base.Channel.GetConfigParameters(tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetConfigParametersAsync(int tenantid) {
            return base.Channel.GetConfigParametersAsync(tenantid);
        }
        
        public System.Data.DataTable GetQueues(int tenantid) {
            return base.Channel.GetQueues(tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetQueuesAsync(int tenantid) {
            return base.Channel.GetQueuesAsync(tenantid);
        }
        
        public System.Data.DataTable GetDashboardBots(int tenantid, string userid) {
            return base.Channel.GetDashboardBots(tenantid, userid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetDashboardBotsAsync(int tenantid, string userid) {
            return base.Channel.GetDashboardBotsAsync(tenantid, userid);
        }
        
        public System.Data.DataTable GetQueueToBotMapping(int tenantid) {
            return base.Channel.GetQueueToBotMapping(tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetQueueToBotMappingAsync(int tenantid) {
            return base.Channel.GetQueueToBotMappingAsync(tenantid);
        }
        
        public System.Data.DataTable GetUserToBotMapping(string userid) {
            return base.Channel.GetUserToBotMapping(userid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetUserToBotMappingAsync(string userid) {
            return base.Channel.GetUserToBotMappingAsync(userid);
        }
        
        public System.Data.DataTable GetBotStartDetails(string botname) {
            return base.Channel.GetBotStartDetails(botname);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetBotStartDetailsAsync(string botname) {
            return base.Channel.GetBotStartDetailsAsync(botname);
        }
        
        public System.Data.DataTable GetBotStartDetailsFromDesktop(string userid, string machinename) {
            return base.Channel.GetBotStartDetailsFromDesktop(userid, machinename);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetBotStartDetailsFromDesktopAsync(string userid, string machinename) {
            return base.Channel.GetBotStartDetailsFromDesktopAsync(userid, machinename);
        }
        
        public System.Data.DataTable GetStompDetails(string botid) {
            return base.Channel.GetStompDetails(botid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetStompDetailsAsync(string botid) {
            return base.Channel.GetStompDetailsAsync(botid);
        }
        
        public System.Data.DataTable GetRQDetails(string botid) {
            return base.Channel.GetRQDetails(botid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetRQDetailsAsync(string botid) {
            return base.Channel.GetRQDetailsAsync(botid);
        }
        
        public System.Data.DataTable GetUsers(int tenantid) {
            return base.Channel.GetUsers(tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetUsersAsync(int tenantid) {
            return base.Channel.GetUsersAsync(tenantid);
        }
        
        public System.Data.DataTable GetLog(string userid) {
            return base.Channel.GetLog(userid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetLogAsync(string userid) {
            return base.Channel.GetLogAsync(userid);
        }
        
        public System.Data.DataTable GetAuditTrail(int tenantid, string userid) {
            return base.Channel.GetAuditTrail(tenantid, userid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetAuditTrailAsync(int tenantid, string userid) {
            return base.Channel.GetAuditTrailAsync(tenantid, userid);
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public AutomationAgent.ServiceReference1.CompositeType GetDataUsingDataContract(AutomationAgent.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<AutomationAgent.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(AutomationAgent.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public void LogDataToDB(System.Data.DataTable LogData) {
            base.Channel.LogDataToDB(LogData);
        }
        
        public System.Threading.Tasks.Task LogDataToDBAsync(System.Data.DataTable LogData) {
            return base.Channel.LogDataToDBAsync(LogData);
        }
        
        public bool PublishProcess(CommonLibrary.PublishProcessEntity publishProcessEntity) {
            return base.Channel.PublishProcess(publishProcessEntity);
        }
        
        public System.Threading.Tasks.Task<bool> PublishProcessAsync(CommonLibrary.PublishProcessEntity publishProcessEntity) {
            return base.Channel.PublishProcessAsync(publishProcessEntity);
        }
        
        public System.Data.DataTable GetProcessDetails(string ProcessName) {
            return base.Channel.GetProcessDetails(ProcessName);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetProcessDetailsAsync(string ProcessName) {
            return base.Channel.GetProcessDetailsAsync(ProcessName);
        }
        
        public System.Data.DataTable DownloadAutomationZipBinary(string ProcessName, string ProcessVersion, string AutomationGroupName, string TenantName) {
            return base.Channel.DownloadAutomationZipBinary(ProcessName, ProcessVersion, AutomationGroupName, TenantName);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> DownloadAutomationZipBinaryAsync(string ProcessName, string ProcessVersion, string AutomationGroupName, string TenantName) {
            return base.Channel.DownloadAutomationZipBinaryAsync(ProcessName, ProcessVersion, AutomationGroupName, TenantName);
        }
        
        public System.Data.DataTable GetProcessDataWitoutZipFile(int tenantid) {
            return base.Channel.GetProcessDataWitoutZipFile(tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetProcessDataWitoutZipFileAsync(int tenantid) {
            return base.Channel.GetProcessDataWitoutZipFileAsync(tenantid);
        }
        
        public System.Data.DataTable LoadProcessVersion(int tenantid, string ProcessId) {
            return base.Channel.LoadProcessVersion(tenantid, ProcessId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> LoadProcessVersionAsync(int tenantid, string ProcessId) {
            return base.Channel.LoadProcessVersionAsync(tenantid, ProcessId);
        }
    }
}
