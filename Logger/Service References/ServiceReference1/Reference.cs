//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Logger.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RequestInput", Namespace="http://schemas.datacontract.org/2004/07/CommonLibrary")]
    [System.SerializableAttribute()]
    public partial class RequestInput : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AutomationGroupNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AutomationProcessNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AutomationProcessVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, object> InputField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] InputSearchParametersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RequestNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RequestTimeoutSLAInSecondsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TenantNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AutomationGroupName {
            get {
                return this.AutomationGroupNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AutomationGroupNameField, value) != true)) {
                    this.AutomationGroupNameField = value;
                    this.RaisePropertyChanged("AutomationGroupName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AutomationProcessName {
            get {
                return this.AutomationProcessNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AutomationProcessNameField, value) != true)) {
                    this.AutomationProcessNameField = value;
                    this.RaisePropertyChanged("AutomationProcessName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AutomationProcessVersion {
            get {
                return this.AutomationProcessVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.AutomationProcessVersionField, value) != true)) {
                    this.AutomationProcessVersionField = value;
                    this.RaisePropertyChanged("AutomationProcessVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, object> Input {
            get {
                return this.InputField;
            }
            set {
                if ((object.ReferenceEquals(this.InputField, value) != true)) {
                    this.InputField = value;
                    this.RaisePropertyChanged("Input");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] InputSearchParameters {
            get {
                return this.InputSearchParametersField;
            }
            set {
                if ((object.ReferenceEquals(this.InputSearchParametersField, value) != true)) {
                    this.InputSearchParametersField = value;
                    this.RaisePropertyChanged("InputSearchParameters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RequestNumber {
            get {
                return this.RequestNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.RequestNumberField, value) != true)) {
                    this.RequestNumberField = value;
                    this.RaisePropertyChanged("RequestNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RequestTimeoutSLAInSeconds {
            get {
                return this.RequestTimeoutSLAInSecondsField;
            }
            set {
                if ((this.RequestTimeoutSLAInSecondsField.Equals(value) != true)) {
                    this.RequestTimeoutSLAInSecondsField = value;
                    this.RaisePropertyChanged("RequestTimeoutSLAInSeconds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TenantName {
            get {
                return this.TenantNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TenantNameField, value) != true)) {
                    this.TenantNameField = value;
                    this.RaisePropertyChanged("TenantName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/AutomationService")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IBOTService")]
    public interface IBOTService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/getKey", ReplyAction="http://tempuri.org/IBOTService/getKeyResponse")]
        string getKey();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/getKey", ReplyAction="http://tempuri.org/IBOTService/getKeyResponse")]
        System.Threading.Tasks.Task<string> getKeyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteCredential", ReplyAction="http://tempuri.org/IBOTService/DeleteCredentialResponse")]
        int DeleteCredential(int id, int groupid, int tenantid, string CredentialName, string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteCredential", ReplyAction="http://tempuri.org/IBOTService/DeleteCredentialResponse")]
        System.Threading.Tasks.Task<int> DeleteCredentialAsync(int id, int groupid, int tenantid, string CredentialName, string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteAsset", ReplyAction="http://tempuri.org/IBOTService/DeleteAssetResponse")]
        int DeleteAsset(int id, int groupid, int tenantid, string AssetName, string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteAsset", ReplyAction="http://tempuri.org/IBOTService/DeleteAssetResponse")]
        System.Threading.Tasks.Task<int> DeleteAssetAsync(int id, int groupid, int tenantid, string AssetName, string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/getCredentials", ReplyAction="http://tempuri.org/IBOTService/getCredentialsResponse")]
        System.Data.DataTable getCredentials(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/getCredentials", ReplyAction="http://tempuri.org/IBOTService/getCredentialsResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> getCredentialsAsync(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/getAssets", ReplyAction="http://tempuri.org/IBOTService/getAssetsResponse")]
        System.Data.DataTable getAssets(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/getAssets", ReplyAction="http://tempuri.org/IBOTService/getAssetsResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> getAssetsAsync(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddCredentials", ReplyAction="http://tempuri.org/IBOTService/AddCredentialsResponse")]
        int AddCredentials(string strAssetName, string strUserName, string Encrypted_Pwd, int tenantid, int groupid, string strcreatedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddCredentials", ReplyAction="http://tempuri.org/IBOTService/AddCredentialsResponse")]
        System.Threading.Tasks.Task<int> AddCredentialsAsync(string strAssetName, string strUserName, string Encrypted_Pwd, int tenantid, int groupid, string strcreatedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddAssets", ReplyAction="http://tempuri.org/IBOTService/AddAssetsResponse")]
        int AddAssets(string strAssetName, string strValue, int tenantid, int groupid, string strcreatedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddAssets", ReplyAction="http://tempuri.org/IBOTService/AddAssetsResponse")]
        System.Threading.Tasks.Task<int> AddAssetsAsync(string strAssetName, string strValue, int tenantid, int groupid, string strcreatedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/getRoleId", ReplyAction="http://tempuri.org/IBOTService/getRoleIdResponse")]
        int getRoleId(int TenantId, string rolename, int groupid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/getRoleId", ReplyAction="http://tempuri.org/IBOTService/getRoleIdResponse")]
        System.Threading.Tasks.Task<int> getRoleIdAsync(int TenantId, string rolename, int groupid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/getRoleType", ReplyAction="http://tempuri.org/IBOTService/getRoleTypeResponse")]
        System.Data.DataTable getRoleType(string groupname, int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/getRoleType", ReplyAction="http://tempuri.org/IBOTService/getRoleTypeResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> getRoleTypeAsync(string groupname, int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/getGrounNames", ReplyAction="http://tempuri.org/IBOTService/getGrounNamesResponse")]
        System.Data.DataTable getGrounNames(int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/getGrounNames", ReplyAction="http://tempuri.org/IBOTService/getGrounNamesResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> getGrounNamesAsync(int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetQueueItem", ReplyAction="http://tempuri.org/IBOTService/GetQueueItemResponse")]
        string GetQueueItem(string iGroupName, string iTenantName, string iQueueName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetQueueItem", ReplyAction="http://tempuri.org/IBOTService/GetQueueItemResponse")]
        System.Threading.Tasks.Task<string> GetQueueItemAsync(string iGroupName, string iTenantName, string iQueueName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/SaveRoleAccess", ReplyAction="http://tempuri.org/IBOTService/SaveRoleAccessResponse")]
        int SaveRoleAccess(
                    string roleName, 
                    int roleid, 
                    int tenantid, 
                    string role, 
                    bool bBotDashboardR, 
                    bool bBotDashboardC, 
                    bool bBotDashboardE, 
                    bool bBotDashboardD, 
                    bool bqueueR, 
                    bool bqueueC, 
                    bool bqueueE, 
                    bool bqueueD, 
                    bool bAddScheduleR, 
                    bool bAddScheduleC, 
                    bool bAddScheduleE, 
                    bool bAddScheduleD, 
                    bool bAddUserR, 
                    bool bAddUserC, 
                    bool bAddUserE, 
                    bool bAddUserD, 
                    bool bAddRobotR, 
                    bool bAddRobotC, 
                    bool bAddRobotE, 
                    bool bAddRobotD, 
                    bool bQueueManagementR, 
                    bool bQueueManagementC, 
                    bool bQueueManagementE, 
                    bool bQueueManagementD, 
                    bool bAssignQueueBotR, 
                    bool bAssignQueueBotC, 
                    bool bAssignQueueBotE, 
                    bool bAssignQueueBotD, 
                    bool bAssignBotUserR, 
                    bool bAssignBotUserC, 
                    bool bAssignBotUserE, 
                    bool bAssignBotUserD, 
                    bool bBotLogR, 
                    bool bBotLogC, 
                    bool bBotLogE, 
                    bool bBotLogD, 
                    bool bAuditTrailR, 
                    bool bAuditTrailC, 
                    bool bAuditTrailE, 
                    bool bAuditTrailD, 
                    bool bScheduleDetailsR, 
                    bool bScheduleDetailsC, 
                    bool bScheduleDetailsE, 
                    bool bScheduleDetailsD, 
                    bool bConfigurationR, 
                    bool bConfigurationC, 
                    bool bConfigurationE, 
                    bool bConfigurationD, 
                    bool bProcessManagementR, 
                    bool bProcessManagementC, 
                    bool bProcessManagementE, 
                    bool bProcessManagementD, 
                    bool bDetailLogR, 
                    bool bDetailLogC, 
                    bool bDetailLogE, 
                    bool bDetailLogD, 
                    bool bPromoteDemoteR, 
                    bool bPromoteDemoteC, 
                    bool bPromoteDemoteE, 
                    bool bPromoteDemoteD);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/SaveRoleAccess", ReplyAction="http://tempuri.org/IBOTService/SaveRoleAccessResponse")]
        System.Threading.Tasks.Task<int> SaveRoleAccessAsync(
                    string roleName, 
                    int roleid, 
                    int tenantid, 
                    string role, 
                    bool bBotDashboardR, 
                    bool bBotDashboardC, 
                    bool bBotDashboardE, 
                    bool bBotDashboardD, 
                    bool bqueueR, 
                    bool bqueueC, 
                    bool bqueueE, 
                    bool bqueueD, 
                    bool bAddScheduleR, 
                    bool bAddScheduleC, 
                    bool bAddScheduleE, 
                    bool bAddScheduleD, 
                    bool bAddUserR, 
                    bool bAddUserC, 
                    bool bAddUserE, 
                    bool bAddUserD, 
                    bool bAddRobotR, 
                    bool bAddRobotC, 
                    bool bAddRobotE, 
                    bool bAddRobotD, 
                    bool bQueueManagementR, 
                    bool bQueueManagementC, 
                    bool bQueueManagementE, 
                    bool bQueueManagementD, 
                    bool bAssignQueueBotR, 
                    bool bAssignQueueBotC, 
                    bool bAssignQueueBotE, 
                    bool bAssignQueueBotD, 
                    bool bAssignBotUserR, 
                    bool bAssignBotUserC, 
                    bool bAssignBotUserE, 
                    bool bAssignBotUserD, 
                    bool bBotLogR, 
                    bool bBotLogC, 
                    bool bBotLogE, 
                    bool bBotLogD, 
                    bool bAuditTrailR, 
                    bool bAuditTrailC, 
                    bool bAuditTrailE, 
                    bool bAuditTrailD, 
                    bool bScheduleDetailsR, 
                    bool bScheduleDetailsC, 
                    bool bScheduleDetailsE, 
                    bool bScheduleDetailsD, 
                    bool bConfigurationR, 
                    bool bConfigurationC, 
                    bool bConfigurationE, 
                    bool bConfigurationD, 
                    bool bProcessManagementR, 
                    bool bProcessManagementC, 
                    bool bProcessManagementE, 
                    bool bProcessManagementD, 
                    bool bDetailLogR, 
                    bool bDetailLogC, 
                    bool bDetailLogE, 
                    bool bDetailLogD, 
                    bool bPromoteDemoteR, 
                    bool bPromoteDemoteC, 
                    bool bPromoteDemoteE, 
                    bool bPromoteDemoteD);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/getRoledata", ReplyAction="http://tempuri.org/IBOTService/getRoledataResponse")]
        System.Data.DataTable getRoledata(int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/getRoledata", ReplyAction="http://tempuri.org/IBOTService/getRoledataResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> getRoledataAsync(int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetRoleAccess", ReplyAction="http://tempuri.org/IBOTService/GetRoleAccessResponse")]
        System.Data.DataTable GetRoleAccess(int roleid, int groupid, int tenantid, string roleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetRoleAccess", ReplyAction="http://tempuri.org/IBOTService/GetRoleAccessResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetRoleAccessAsync(int roleid, int groupid, int tenantid, string roleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddRole", ReplyAction="http://tempuri.org/IBOTService/AddRoleResponse")]
        int AddRole(string roleName, int groupid, int tenantid, string createdby, string groupname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddRole", ReplyAction="http://tempuri.org/IBOTService/AddRoleResponse")]
        System.Threading.Tasks.Task<int> AddRoleAsync(string roleName, int groupid, int tenantid, string createdby, string groupname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetCredentialsActivity", ReplyAction="http://tempuri.org/IBOTService/GetCredentialsActivityResponse")]
        System.Data.DataTable GetCredentialsActivity(string credentialName, int TenantId, int groupid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetCredentialsActivity", ReplyAction="http://tempuri.org/IBOTService/GetCredentialsActivityResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetCredentialsActivityAsync(string credentialName, int TenantId, int groupid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetAssetsActivity", ReplyAction="http://tempuri.org/IBOTService/GetAssetsActivityResponse")]
        System.Data.DataTable GetAssetsActivity(string assetname, int TenantId, int groupid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetAssetsActivity", ReplyAction="http://tempuri.org/IBOTService/GetAssetsActivityResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetAssetsActivityAsync(string assetname, int TenantId, int groupid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/getMicrosoftOCR", ReplyAction="http://tempuri.org/IBOTService/getMicrosoftOCRResponse")]
        System.Data.DataTable getMicrosoftOCR();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/getMicrosoftOCR", ReplyAction="http://tempuri.org/IBOTService/getMicrosoftOCRResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> getMicrosoftOCRAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteProcessSchedule", ReplyAction="http://tempuri.org/IBOTService/DeleteProcessScheduleResponse")]
        int DeleteProcessSchedule(string strId, string strprocessename, string strBotName, string strChronExp, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteProcessSchedule", ReplyAction="http://tempuri.org/IBOTService/DeleteProcessScheduleResponse")]
        System.Threading.Tasks.Task<int> DeleteProcessScheduleAsync(string strId, string strprocessename, string strBotName, string strChronExp, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetProcessSchedules", ReplyAction="http://tempuri.org/IBOTService/GetProcessSchedulesResponse")]
        System.Data.DataTable GetProcessSchedules(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetProcessSchedules", ReplyAction="http://tempuri.org/IBOTService/GetProcessSchedulesResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetProcessSchedulesAsync(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/updateBotNameTouserBotMapping", ReplyAction="http://tempuri.org/IBOTService/updateBotNameTouserBotMappingResponse")]
        int updateBotNameTouserBotMapping(int groupid, int tenantid, string botname, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/updateBotNameTouserBotMapping", ReplyAction="http://tempuri.org/IBOTService/updateBotNameTouserBotMappingResponse")]
        System.Threading.Tasks.Task<int> updateBotNameTouserBotMappingAsync(int groupid, int tenantid, string botname, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/updateQueueToBotMapping", ReplyAction="http://tempuri.org/IBOTService/updateQueueToBotMappingResponse")]
        int updateQueueToBotMapping(int groupid, int tenantid, string botname, string QueueName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/updateQueueToBotMapping", ReplyAction="http://tempuri.org/IBOTService/updateQueueToBotMappingResponse")]
        System.Threading.Tasks.Task<int> updateQueueToBotMappingAsync(int groupid, int tenantid, string botname, string QueueName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/ChangeGroup", ReplyAction="http://tempuri.org/IBOTService/ChangeGroupResponse")]
        int ChangeGroup(string currentRoleCG, string userName, string newRole, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/ChangeGroup", ReplyAction="http://tempuri.org/IBOTService/ChangeGroupResponse")]
        System.Threading.Tasks.Task<int> ChangeGroupAsync(string currentRoleCG, string userName, string newRole, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/UpdateIsactiveStatusTenantRelatedTables", ReplyAction="http://tempuri.org/IBOTService/UpdateIsactiveStatusTenantRelatedTablesResponse")]
        int UpdateIsactiveStatusTenantRelatedTables(int tenantid, int isactive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/UpdateIsactiveStatusTenantRelatedTables", ReplyAction="http://tempuri.org/IBOTService/UpdateIsactiveStatusTenantRelatedTablesResponse")]
        System.Threading.Tasks.Task<int> UpdateIsactiveStatusTenantRelatedTablesAsync(int tenantid, int isactive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/CheckIsactiveStatusTenant", ReplyAction="http://tempuri.org/IBOTService/CheckIsactiveStatusTenantResponse")]
        int CheckIsactiveStatusTenant(int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/CheckIsactiveStatusTenant", ReplyAction="http://tempuri.org/IBOTService/CheckIsactiveStatusTenantResponse")]
        System.Threading.Tasks.Task<int> CheckIsactiveStatusTenantAsync(int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteBot", ReplyAction="http://tempuri.org/IBOTService/DeleteBotResponse")]
        int DeleteBot(string botname, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteBot", ReplyAction="http://tempuri.org/IBOTService/DeleteBotResponse")]
        System.Threading.Tasks.Task<int> DeleteBotAsync(string botname, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/CheckScheduleStatus", ReplyAction="http://tempuri.org/IBOTService/CheckScheduleStatusResponse")]
        int CheckScheduleStatus(string botname, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/CheckScheduleStatus", ReplyAction="http://tempuri.org/IBOTService/CheckScheduleStatusResponse")]
        System.Threading.Tasks.Task<int> CheckScheduleStatusAsync(string botname, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetCountScheduleRelatedBot", ReplyAction="http://tempuri.org/IBOTService/GetCountScheduleRelatedBotResponse")]
        System.Data.DataTable GetCountScheduleRelatedBot(int tenantid, string botName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetCountScheduleRelatedBot", ReplyAction="http://tempuri.org/IBOTService/GetCountScheduleRelatedBotResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetCountScheduleRelatedBotAsync(int tenantid, string botName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/insertLog", ReplyAction="http://tempuri.org/IBOTService/insertLogResponse")]
        int insertLog(string Message, string detailLog, int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/insertLog", ReplyAction="http://tempuri.org/IBOTService/insertLogResponse")]
        System.Threading.Tasks.Task<int> insertLogAsync(string Message, string detailLog, int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/getMonthlyChartData", ReplyAction="http://tempuri.org/IBOTService/getMonthlyChartDataResponse")]
        System.Data.DataTable getMonthlyChartData(string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/getMonthlyChartData", ReplyAction="http://tempuri.org/IBOTService/getMonthlyChartDataResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> getMonthlyChartDataAsync(string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetData_createschedulestatus", ReplyAction="http://tempuri.org/IBOTService/GetData_createschedulestatusResponse")]
        System.Data.DataTable GetData_createschedulestatus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetData_createschedulestatus", ReplyAction="http://tempuri.org/IBOTService/GetData_createschedulestatusResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetData_createschedulestatusAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetddlData_createschedulestatus", ReplyAction="http://tempuri.org/IBOTService/GetddlData_createschedulestatusResponse")]
        System.Data.DataTable GetddlData_createschedulestatus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetddlData_createschedulestatus", ReplyAction="http://tempuri.org/IBOTService/GetddlData_createschedulestatusResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetddlData_createschedulestatusAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/getChartData", ReplyAction="http://tempuri.org/IBOTService/getChartDataResponse")]
        System.Data.DataTable getChartData(string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/getChartData", ReplyAction="http://tempuri.org/IBOTService/getChartDataResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> getChartDataAsync(string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/getDoughnutChartData", ReplyAction="http://tempuri.org/IBOTService/getDoughnutChartDataResponse")]
        System.Data.DataTable getDoughnutChartData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/getDoughnutChartData", ReplyAction="http://tempuri.org/IBOTService/getDoughnutChartDataResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> getDoughnutChartDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/insertActivityLog", ReplyAction="http://tempuri.org/IBOTService/insertActivityLogResponse")]
        int insertActivityLog(string domainName, string userName, string groupName, string action, int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/insertActivityLog", ReplyAction="http://tempuri.org/IBOTService/insertActivityLogResponse")]
        System.Threading.Tasks.Task<int> insertActivityLogAsync(string domainName, string userName, string groupName, string action, int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/PiyushLogs", ReplyAction="http://tempuri.org/IBOTService/PiyushLogsResponse")]
        int PiyushLogs(string Message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/PiyushLogs", ReplyAction="http://tempuri.org/IBOTService/PiyushLogsResponse")]
        System.Threading.Tasks.Task<int> PiyushLogsAsync(string Message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetRQDetailsForBotDashboard", ReplyAction="http://tempuri.org/IBOTService/GetRQDetailsForBotDashboardResponse")]
        System.Data.DataTable GetRQDetailsForBotDashboard(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetRQDetailsForBotDashboard", ReplyAction="http://tempuri.org/IBOTService/GetRQDetailsForBotDashboardResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetRQDetailsForBotDashboardAsync(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteTenantWithAllRelatedData", ReplyAction="http://tempuri.org/IBOTService/DeleteTenantWithAllRelatedDataResponse")]
        int DeleteTenantWithAllRelatedData(int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteTenantWithAllRelatedData", ReplyAction="http://tempuri.org/IBOTService/DeleteTenantWithAllRelatedDataResponse")]
        System.Threading.Tasks.Task<int> DeleteTenantWithAllRelatedDataAsync(int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetCountToDeleteTenant", ReplyAction="http://tempuri.org/IBOTService/GetCountToDeleteTenantResponse")]
        System.Data.DataTable GetCountToDeleteTenant(int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetCountToDeleteTenant", ReplyAction="http://tempuri.org/IBOTService/GetCountToDeleteTenantResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetCountToDeleteTenantAsync(int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/getActivityLog", ReplyAction="http://tempuri.org/IBOTService/getActivityLogResponse")]
        System.Data.DataTable getActivityLog(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/getActivityLog", ReplyAction="http://tempuri.org/IBOTService/getActivityLogResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> getActivityLogAsync(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/getCompleteLogs", ReplyAction="http://tempuri.org/IBOTService/getCompleteLogsResponse")]
        System.Data.DataTable getCompleteLogs(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/getCompleteLogs", ReplyAction="http://tempuri.org/IBOTService/getCompleteLogsResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> getCompleteLogsAsync(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetDetailsDashboard", ReplyAction="http://tempuri.org/IBOTService/GetDetailsDashboardResponse")]
        int[] GetDetailsDashboard(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetDetailsDashboard", ReplyAction="http://tempuri.org/IBOTService/GetDetailsDashboardResponse")]
        System.Threading.Tasks.Task<int[]> GetDetailsDashboardAsync(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/UpdateUserPassword", ReplyAction="http://tempuri.org/IBOTService/UpdateUserPasswordResponse")]
        int UpdateUserPassword(string userid, string OldPassword, string NewPassword, int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/UpdateUserPassword", ReplyAction="http://tempuri.org/IBOTService/UpdateUserPasswordResponse")]
        System.Threading.Tasks.Task<int> UpdateUserPasswordAsync(string userid, string OldPassword, string NewPassword, int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/CreateScheduleStatus", ReplyAction="http://tempuri.org/IBOTService/CreateScheduleStatusResponse")]
        int CreateScheduleStatus(string QueueName, string BotName, string ChronExpression, string Status, int GroupId, int TenantId, string StartTime, string EndTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/CreateScheduleStatus", ReplyAction="http://tempuri.org/IBOTService/CreateScheduleStatusResponse")]
        System.Threading.Tasks.Task<int> CreateScheduleStatusAsync(string QueueName, string BotName, string ChronExpression, string Status, int GroupId, int TenantId, string StartTime, string EndTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetScheduleStatus", ReplyAction="http://tempuri.org/IBOTService/GetScheduleStatusResponse")]
        System.Data.DataTable GetScheduleStatus(int groupid, int tenantid, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetScheduleStatus", ReplyAction="http://tempuri.org/IBOTService/GetScheduleStatusResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetScheduleStatusAsync(int groupid, int tenantid, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddSchedule", ReplyAction="http://tempuri.org/IBOTService/AddScheduleResponse")]
        int AddSchedule(string strQueueName, string strBotName, string strChronExp, string stopAfter, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddSchedule", ReplyAction="http://tempuri.org/IBOTService/AddScheduleResponse")]
        System.Threading.Tasks.Task<int> AddScheduleAsync(string strQueueName, string strBotName, string strChronExp, string stopAfter, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddScheduleForProcess", ReplyAction="http://tempuri.org/IBOTService/AddScheduleForProcessResponse")]
        int AddScheduleForProcess(string strProcessName, string strBotName, string strChronExp, string StopAfter, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddScheduleForProcess", ReplyAction="http://tempuri.org/IBOTService/AddScheduleForProcessResponse")]
        System.Threading.Tasks.Task<int> AddScheduleForProcessAsync(string strProcessName, string strBotName, string strChronExp, string StopAfter, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddQueueDetails", ReplyAction="http://tempuri.org/IBOTService/AddQueueDetailsResponse")]
        int AddQueueDetails(string queueName, int groupid, int iTenantID, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddQueueDetails", ReplyAction="http://tempuri.org/IBOTService/AddQueueDetailsResponse")]
        System.Threading.Tasks.Task<int> AddQueueDetailsAsync(string queueName, int groupid, int iTenantID, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteSchedule", ReplyAction="http://tempuri.org/IBOTService/DeleteScheduleResponse")]
        int DeleteSchedule(string strId, string strQueueName, string strBotName, string strChronExp, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteSchedule", ReplyAction="http://tempuri.org/IBOTService/DeleteScheduleResponse")]
        System.Threading.Tasks.Task<int> DeleteScheduleAsync(string strId, string strQueueName, string strBotName, string strChronExp, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetSchedules", ReplyAction="http://tempuri.org/IBOTService/GetSchedulesResponse")]
        System.Data.DataTable GetSchedules(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetSchedules", ReplyAction="http://tempuri.org/IBOTService/GetSchedulesResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetSchedulesAsync(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetRoleBaseAccess", ReplyAction="http://tempuri.org/IBOTService/GetRoleBaseAccessResponse")]
        System.Data.DataTable GetRoleBaseAccess(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetRoleBaseAccess", ReplyAction="http://tempuri.org/IBOTService/GetRoleBaseAccessResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetRoleBaseAccessAsync(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetUserBaseAccess", ReplyAction="http://tempuri.org/IBOTService/GetUserBaseAccessResponse")]
        System.Data.DataTable GetUserBaseAccess(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetUserBaseAccess", ReplyAction="http://tempuri.org/IBOTService/GetUserBaseAccessResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetUserBaseAccessAsync(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/SaveRoleBaseAccess", ReplyAction="http://tempuri.org/IBOTService/SaveRoleBaseAccessResponse")]
        int SaveRoleBaseAccess(
                    int groupid, 
                    int tenantid, 
                    string role, 
                    bool bBotDashboardR, 
                    bool bBotDashboardC, 
                    bool bBotDashboardE, 
                    bool bBotDashboardD, 
                    bool bqueueR, 
                    bool bqueueC, 
                    bool bqueueE, 
                    bool bqueueD, 
                    bool bAddScheduleR, 
                    bool bAddScheduleC, 
                    bool bAddScheduleE, 
                    bool bAddScheduleD, 
                    bool bAddUserR, 
                    bool bAddUserC, 
                    bool bAddUserE, 
                    bool bAddUserD, 
                    bool bAddRobotR, 
                    bool bAddRobotC, 
                    bool bAddRobotE, 
                    bool bAddRobotD, 
                    bool bQueueManagementR, 
                    bool bQueueManagementC, 
                    bool bQueueManagementE, 
                    bool bQueueManagementD, 
                    bool bAssignQueueBotR, 
                    bool bAssignQueueBotC, 
                    bool bAssignQueueBotE, 
                    bool bAssignQueueBotD, 
                    bool bAssignBotUserR, 
                    bool bAssignBotUserC, 
                    bool bAssignBotUserE, 
                    bool bAssignBotUserD, 
                    bool bBotLogR, 
                    bool bBotLogC, 
                    bool bBotLogE, 
                    bool bBotLogD, 
                    bool bAuditTrailR, 
                    bool bAuditTrailC, 
                    bool bAuditTrailE, 
                    bool bAuditTrailD, 
                    bool bScheduleDetailsR, 
                    bool bScheduleDetailsC, 
                    bool bScheduleDetailsE, 
                    bool bScheduleDetailsD, 
                    bool bConfigurationR, 
                    bool bConfigurationC, 
                    bool bConfigurationE, 
                    bool bConfigurationD, 
                    bool bProcessManagementR, 
                    bool bProcessManagementC, 
                    bool bProcessManagementE, 
                    bool bProcessManagementD, 
                    bool bDetailLogR, 
                    bool bDetailLogC, 
                    bool bDetailLogE, 
                    bool bDetailLogD, 
                    bool bPromoteDemoteR, 
                    bool bPromoteDemoteC, 
                    bool bPromoteDemoteE, 
                    bool bPromoteDemoteD);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/SaveRoleBaseAccess", ReplyAction="http://tempuri.org/IBOTService/SaveRoleBaseAccessResponse")]
        System.Threading.Tasks.Task<int> SaveRoleBaseAccessAsync(
                    int groupid, 
                    int tenantid, 
                    string role, 
                    bool bBotDashboardR, 
                    bool bBotDashboardC, 
                    bool bBotDashboardE, 
                    bool bBotDashboardD, 
                    bool bqueueR, 
                    bool bqueueC, 
                    bool bqueueE, 
                    bool bqueueD, 
                    bool bAddScheduleR, 
                    bool bAddScheduleC, 
                    bool bAddScheduleE, 
                    bool bAddScheduleD, 
                    bool bAddUserR, 
                    bool bAddUserC, 
                    bool bAddUserE, 
                    bool bAddUserD, 
                    bool bAddRobotR, 
                    bool bAddRobotC, 
                    bool bAddRobotE, 
                    bool bAddRobotD, 
                    bool bQueueManagementR, 
                    bool bQueueManagementC, 
                    bool bQueueManagementE, 
                    bool bQueueManagementD, 
                    bool bAssignQueueBotR, 
                    bool bAssignQueueBotC, 
                    bool bAssignQueueBotE, 
                    bool bAssignQueueBotD, 
                    bool bAssignBotUserR, 
                    bool bAssignBotUserC, 
                    bool bAssignBotUserE, 
                    bool bAssignBotUserD, 
                    bool bBotLogR, 
                    bool bBotLogC, 
                    bool bBotLogE, 
                    bool bBotLogD, 
                    bool bAuditTrailR, 
                    bool bAuditTrailC, 
                    bool bAuditTrailE, 
                    bool bAuditTrailD, 
                    bool bScheduleDetailsR, 
                    bool bScheduleDetailsC, 
                    bool bScheduleDetailsE, 
                    bool bScheduleDetailsD, 
                    bool bConfigurationR, 
                    bool bConfigurationC, 
                    bool bConfigurationE, 
                    bool bConfigurationD, 
                    bool bProcessManagementR, 
                    bool bProcessManagementC, 
                    bool bProcessManagementE, 
                    bool bProcessManagementD, 
                    bool bDetailLogR, 
                    bool bDetailLogC, 
                    bool bDetailLogE, 
                    bool bDetailLogD, 
                    bool bPromoteDemoteR, 
                    bool bPromoteDemoteC, 
                    bool bPromoteDemoteE, 
                    bool bPromoteDemoteD);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetPageAccess", ReplyAction="http://tempuri.org/IBOTService/GetPageAccessResponse")]
        System.Data.DataTable GetPageAccess(int roleid, int groupid, int tenantid, string pagename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetPageAccess", ReplyAction="http://tempuri.org/IBOTService/GetPageAccessResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetPageAccessAsync(int roleid, int groupid, int tenantid, string pagename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetPageAccessUser", ReplyAction="http://tempuri.org/IBOTService/GetPageAccessUserResponse")]
        System.Data.DataTable GetPageAccessUser(int groupid, int tenantid, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetPageAccessUser", ReplyAction="http://tempuri.org/IBOTService/GetPageAccessUserResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetPageAccessUserAsync(int groupid, int tenantid, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/SaveRoleBaseAccessUser", ReplyAction="http://tempuri.org/IBOTService/SaveRoleBaseAccessUserResponse")]
        int SaveRoleBaseAccessUser(
                    int IGroupID, 
                    string usernameI, 
                    int ITenantID, 
                    bool bBotDashboardR, 
                    bool bBotDashboardC, 
                    bool bBotDashboardE, 
                    bool bBotDashboardD, 
                    bool bqueueR, 
                    bool bqueueC, 
                    bool bqueueE, 
                    bool bqueueD, 
                    bool bAddScheduleR, 
                    bool bAddScheduleC, 
                    bool bAddScheduleE, 
                    bool bAddScheduleD, 
                    bool bAddUserR, 
                    bool bAddUserC, 
                    bool bAddUserE, 
                    bool bAddUserD, 
                    bool bAddRobotR, 
                    bool bAddRobotC, 
                    bool bAddRobotE, 
                    bool bAddRobotD, 
                    bool bQueueManagementR, 
                    bool bQueueManagementC, 
                    bool bQueueManagementE, 
                    bool bQueueManagementD, 
                    bool bAssignQueueBotR, 
                    bool bAssignQueueBotC, 
                    bool bAssignQueueBotE, 
                    bool bAssignQueueBotD, 
                    bool bAssignBotUserR, 
                    bool bAssignBotUserC, 
                    bool bAssignBotUserE, 
                    bool bAssignBotUserD, 
                    bool bBotLogR, 
                    bool bBotLogC, 
                    bool bBotLogE, 
                    bool bBotLogD, 
                    bool bAuditTrailR, 
                    bool bAuditTrailC, 
                    bool bAuditTrailE, 
                    bool bAuditTrailD, 
                    bool bScheduleDetailsR, 
                    bool bScheduleDetailsC, 
                    bool bScheduleDetailsE, 
                    bool bScheduleDetailsD, 
                    bool bConfigurationR, 
                    bool bConfigurationC, 
                    bool bConfigurationE, 
                    bool bConfigurationD, 
                    bool bProcessManagementR, 
                    bool bProcessManagementC, 
                    bool bProcessManagementE, 
                    bool bProcessManagementD, 
                    bool bDetailLogR, 
                    bool bDetailLogC, 
                    bool bDetailLogE, 
                    bool bDetailLogD, 
                    bool bPromoteDemoteR, 
                    bool bPromoteDemoteC, 
                    bool bPromoteDemoteE, 
                    bool bPromoteDemoteD);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/SaveRoleBaseAccessUser", ReplyAction="http://tempuri.org/IBOTService/SaveRoleBaseAccessUserResponse")]
        System.Threading.Tasks.Task<int> SaveRoleBaseAccessUserAsync(
                    int IGroupID, 
                    string usernameI, 
                    int ITenantID, 
                    bool bBotDashboardR, 
                    bool bBotDashboardC, 
                    bool bBotDashboardE, 
                    bool bBotDashboardD, 
                    bool bqueueR, 
                    bool bqueueC, 
                    bool bqueueE, 
                    bool bqueueD, 
                    bool bAddScheduleR, 
                    bool bAddScheduleC, 
                    bool bAddScheduleE, 
                    bool bAddScheduleD, 
                    bool bAddUserR, 
                    bool bAddUserC, 
                    bool bAddUserE, 
                    bool bAddUserD, 
                    bool bAddRobotR, 
                    bool bAddRobotC, 
                    bool bAddRobotE, 
                    bool bAddRobotD, 
                    bool bQueueManagementR, 
                    bool bQueueManagementC, 
                    bool bQueueManagementE, 
                    bool bQueueManagementD, 
                    bool bAssignQueueBotR, 
                    bool bAssignQueueBotC, 
                    bool bAssignQueueBotE, 
                    bool bAssignQueueBotD, 
                    bool bAssignBotUserR, 
                    bool bAssignBotUserC, 
                    bool bAssignBotUserE, 
                    bool bAssignBotUserD, 
                    bool bBotLogR, 
                    bool bBotLogC, 
                    bool bBotLogE, 
                    bool bBotLogD, 
                    bool bAuditTrailR, 
                    bool bAuditTrailC, 
                    bool bAuditTrailE, 
                    bool bAuditTrailD, 
                    bool bScheduleDetailsR, 
                    bool bScheduleDetailsC, 
                    bool bScheduleDetailsE, 
                    bool bScheduleDetailsD, 
                    bool bConfigurationR, 
                    bool bConfigurationC, 
                    bool bConfigurationE, 
                    bool bConfigurationD, 
                    bool bProcessManagementR, 
                    bool bProcessManagementC, 
                    bool bProcessManagementE, 
                    bool bProcessManagementD, 
                    bool bDetailLogR, 
                    bool bDetailLogC, 
                    bool bDetailLogE, 
                    bool bDetailLogD, 
                    bool bPromoteDemoteR, 
                    bool bPromoteDemoteC, 
                    bool bPromoteDemoteE, 
                    bool bPromoteDemoteD);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AutomationRequest", ReplyAction="http://tempuri.org/IBOTService/AutomationRequestResponse")]
        bool AutomationRequest(Logger.ServiceReference1.RequestInput _requestInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AutomationRequest", ReplyAction="http://tempuri.org/IBOTService/AutomationRequestResponse")]
        System.Threading.Tasks.Task<bool> AutomationRequestAsync(Logger.ServiceReference1.RequestInput _requestInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AutomationRequestPriority", ReplyAction="http://tempuri.org/IBOTService/AutomationRequestPriorityResponse")]
        bool AutomationRequestPriority(string iQueueName, string strRoutingKey, System.Collections.Generic.Dictionary<string, object> iMessage1, int iMsgPriority, string iGroupName, string iTenantName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AutomationRequestPriority", ReplyAction="http://tempuri.org/IBOTService/AutomationRequestPriorityResponse")]
        System.Threading.Tasks.Task<bool> AutomationRequestPriorityAsync(string iQueueName, string strRoutingKey, System.Collections.Generic.Dictionary<string, object> iMessage1, int iMsgPriority, string iGroupName, string iTenantName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddUser", ReplyAction="http://tempuri.org/IBOTService/AddUserResponse")]
        int AddUser(string domainname, string userid, string pwd, int groupid, string groupname, int tenantid, string strUserRole, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddUser", ReplyAction="http://tempuri.org/IBOTService/AddUserResponse")]
        System.Threading.Tasks.Task<int> AddUserAsync(string domainname, string userid, string pwd, int groupid, string groupname, int tenantid, string strUserRole, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddTenant", ReplyAction="http://tempuri.org/IBOTService/AddTenantResponse")]
        int AddTenant(string TenantName, string owner, int groupid, int iTenantId, string createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddTenant", ReplyAction="http://tempuri.org/IBOTService/AddTenantResponse")]
        System.Threading.Tasks.Task<int> AddTenantAsync(string TenantName, string owner, int groupid, int iTenantId, string createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteTenant", ReplyAction="http://tempuri.org/IBOTService/DeleteTenantResponse")]
        int DeleteTenant(int groupid, int TenantId, string CurrentUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteTenant", ReplyAction="http://tempuri.org/IBOTService/DeleteTenantResponse")]
        System.Threading.Tasks.Task<int> DeleteTenantAsync(int groupid, int TenantId, string CurrentUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetTenantId", ReplyAction="http://tempuri.org/IBOTService/GetTenantIdResponse")]
        int GetTenantId(int groupid, int tenantid, string TenantName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetTenantId", ReplyAction="http://tempuri.org/IBOTService/GetTenantIdResponse")]
        System.Threading.Tasks.Task<int> GetTenantIdAsync(int groupid, int tenantid, string TenantName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetGroupId", ReplyAction="http://tempuri.org/IBOTService/GetGroupIdResponse")]
        int GetGroupId(string groupName, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetGroupId", ReplyAction="http://tempuri.org/IBOTService/GetGroupIdResponse")]
        System.Threading.Tasks.Task<int> GetGroupIdAsync(string groupName, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddGroup", ReplyAction="http://tempuri.org/IBOTService/AddGroupResponse")]
        int AddGroup(string groupName, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddGroup", ReplyAction="http://tempuri.org/IBOTService/AddGroupResponse")]
        System.Threading.Tasks.Task<int> AddGroupAsync(string groupName, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteGroup", ReplyAction="http://tempuri.org/IBOTService/DeleteGroupResponse")]
        int DeleteGroup(int id, int groupId, int tenantId, string groupName, string currentUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteGroup", ReplyAction="http://tempuri.org/IBOTService/DeleteGroupResponse")]
        System.Threading.Tasks.Task<int> DeleteGroupAsync(int id, int groupId, int tenantId, string groupName, string currentUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/UpdateDefaultVersion", ReplyAction="http://tempuri.org/IBOTService/UpdateDefaultVersionResponse")]
        int UpdateDefaultVersion(int iTenantId, int groupid, string ProcessId, string updatedVersion, bool isLatest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/UpdateDefaultVersion", ReplyAction="http://tempuri.org/IBOTService/UpdateDefaultVersionResponse")]
        System.Threading.Tasks.Task<int> UpdateDefaultVersionAsync(int iTenantId, int groupid, string ProcessId, string updatedVersion, bool isLatest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddProcess", ReplyAction="http://tempuri.org/IBOTService/AddProcessResponse")]
        int AddProcess(string ProcessName, int EnvironmentName, int groupid, int tenantid, string ProcessVersion, bool latestVersion, string createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddProcess", ReplyAction="http://tempuri.org/IBOTService/AddProcessResponse")]
        System.Threading.Tasks.Task<int> AddProcessAsync(string ProcessName, int EnvironmentName, int groupid, int tenantid, string ProcessVersion, bool latestVersion, string createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddProcessWithZip", ReplyAction="http://tempuri.org/IBOTService/AddProcessWithZipResponse")]
        int AddProcessWithZip(string ProcessName, int groupid, int TenantId, string ProcessVersion, bool LatestVersion, string createdBy, byte[] ZipDataFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddProcessWithZip", ReplyAction="http://tempuri.org/IBOTService/AddProcessWithZipResponse")]
        System.Threading.Tasks.Task<int> AddProcessWithZipAsync(string ProcessName, int groupid, int TenantId, string ProcessVersion, bool LatestVersion, string createdBy, byte[] ZipDataFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddBot", ReplyAction="http://tempuri.org/IBOTService/AddBotResponse")]
        int AddBot(string strBotName, string strBotId, string pwd, string botkey, string strMachineName, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddBot", ReplyAction="http://tempuri.org/IBOTService/AddBotResponse")]
        System.Threading.Tasks.Task<int> AddBotAsync(string strBotName, string strBotId, string pwd, string botkey, string strMachineName, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddConfigParameters", ReplyAction="http://tempuri.org/IBOTService/AddConfigParametersResponse")]
        int AddConfigParameters(string strParameterName, string strParameterValue, int iAccessLevelProcessId, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddConfigParameters", ReplyAction="http://tempuri.org/IBOTService/AddConfigParametersResponse")]
        System.Threading.Tasks.Task<int> AddConfigParametersAsync(string strParameterName, string strParameterValue, int iAccessLevelProcessId, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteConfigParameters", ReplyAction="http://tempuri.org/IBOTService/DeleteConfigParametersResponse")]
        int DeleteConfigParameters(int iParameterId, int groupid, int tenantid, string strCurrentUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteConfigParameters", ReplyAction="http://tempuri.org/IBOTService/DeleteConfigParametersResponse")]
        System.Threading.Tasks.Task<int> DeleteConfigParametersAsync(int iParameterId, int groupid, int tenantid, string strCurrentUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteUser", ReplyAction="http://tempuri.org/IBOTService/DeleteUserResponse")]
        int DeleteUser(string strId, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteUser", ReplyAction="http://tempuri.org/IBOTService/DeleteUserResponse")]
        System.Threading.Tasks.Task<int> DeleteUserAsync(string strId, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteProcess", ReplyAction="http://tempuri.org/IBOTService/DeleteProcessResponse")]
        int DeleteProcess(string strId, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteProcess", ReplyAction="http://tempuri.org/IBOTService/DeleteProcessResponse")]
        System.Threading.Tasks.Task<int> DeleteProcessAsync(string strId, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteProcessVersion", ReplyAction="http://tempuri.org/IBOTService/DeleteProcessVersionResponse")]
        int DeleteProcessVersion(string strProcessId, string strProcessName, string strProcessVersion, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteProcessVersion", ReplyAction="http://tempuri.org/IBOTService/DeleteProcessVersionResponse")]
        System.Threading.Tasks.Task<int> DeleteProcessVersionAsync(string strProcessId, string strProcessName, string strProcessVersion, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteQueueToBotMapping", ReplyAction="http://tempuri.org/IBOTService/DeleteQueueToBotMappingResponse")]
        int DeleteQueueToBotMapping(string strBotId, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteQueueToBotMapping", ReplyAction="http://tempuri.org/IBOTService/DeleteQueueToBotMappingResponse")]
        System.Threading.Tasks.Task<int> DeleteQueueToBotMappingAsync(string strBotId, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteUserToBotMapping", ReplyAction="http://tempuri.org/IBOTService/DeleteUserToBotMappingResponse")]
        int DeleteUserToBotMapping(string strId, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteUserToBotMapping", ReplyAction="http://tempuri.org/IBOTService/DeleteUserToBotMappingResponse")]
        System.Threading.Tasks.Task<int> DeleteUserToBotMappingAsync(string strId, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/UpdateCustomRoleBasedAccess", ReplyAction="http://tempuri.org/IBOTService/UpdateCustomRoleBasedAccessResponse")]
        int UpdateCustomRoleBasedAccess(
                    bool QDetailsDevVal, 
                    bool QDetailsProdVal, 
                    bool QDetailsTestVal, 
                    bool AddSchedDevVal, 
                    bool AddSchedProdVal, 
                    bool AddSchedTestVal, 
                    bool AddUserDevVal, 
                    bool AddUserProdVal, 
                    bool AddUserTestVal, 
                    bool AddRobotDevVal, 
                    bool AddRobotProdVal, 
                    bool AddRobotTestVal, 
                    bool AddQDevVal, 
                    bool AddQProdVal, 
                    bool AddQTestVal, 
                    bool AddGroupDevVal, 
                    bool AddGroupProdVal, 
                    bool AddGroupTestVal, 
                    bool AddQueToBotDevVal, 
                    bool AddQueToBotProdVal, 
                    bool AddQueToBotTestVal, 
                    bool AddBotToUserDevVal, 
                    bool AddBotToUserProdVal, 
                    bool AddBotToUserTestVal, 
                    bool BotLogDevVal, 
                    bool BotLogProdVal, 
                    bool BotLogTestVal, 
                    bool AuditTrailDevVal, 
                    bool AuditTrailProdVal, 
                    bool AuditTrailTestVal, 
                    int groupid, 
                    int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/UpdateCustomRoleBasedAccess", ReplyAction="http://tempuri.org/IBOTService/UpdateCustomRoleBasedAccessResponse")]
        System.Threading.Tasks.Task<int> UpdateCustomRoleBasedAccessAsync(
                    bool QDetailsDevVal, 
                    bool QDetailsProdVal, 
                    bool QDetailsTestVal, 
                    bool AddSchedDevVal, 
                    bool AddSchedProdVal, 
                    bool AddSchedTestVal, 
                    bool AddUserDevVal, 
                    bool AddUserProdVal, 
                    bool AddUserTestVal, 
                    bool AddRobotDevVal, 
                    bool AddRobotProdVal, 
                    bool AddRobotTestVal, 
                    bool AddQDevVal, 
                    bool AddQProdVal, 
                    bool AddQTestVal, 
                    bool AddGroupDevVal, 
                    bool AddGroupProdVal, 
                    bool AddGroupTestVal, 
                    bool AddQueToBotDevVal, 
                    bool AddQueToBotProdVal, 
                    bool AddQueToBotTestVal, 
                    bool AddBotToUserDevVal, 
                    bool AddBotToUserProdVal, 
                    bool AddBotToUserTestVal, 
                    bool BotLogDevVal, 
                    bool BotLogProdVal, 
                    bool BotLogTestVal, 
                    bool AuditTrailDevVal, 
                    bool AuditTrailProdVal, 
                    bool AuditTrailTestVal, 
                    int groupid, 
                    int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetCustomRoleBasedAccess", ReplyAction="http://tempuri.org/IBOTService/GetCustomRoleBasedAccessResponse")]
        System.Data.DataTable GetCustomRoleBasedAccess(int groupid, int iTenantId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetCustomRoleBasedAccess", ReplyAction="http://tempuri.org/IBOTService/GetCustomRoleBasedAccessResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetCustomRoleBasedAccessAsync(int groupid, int iTenantId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/LoginUser", ReplyAction="http://tempuri.org/IBOTService/LoginUserResponse")]
        System.Data.DataTable LoginUser(string domainname, string userid, string pwd, string tenantName, string groupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/LoginUser", ReplyAction="http://tempuri.org/IBOTService/LoginUserResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> LoginUserAsync(string domainname, string userid, string pwd, string tenantName, string groupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AssignBotToUser", ReplyAction="http://tempuri.org/IBOTService/AssignBotToUserResponse")]
        int AssignBotToUser(string strBotId, string strUserId, string createdby, int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AssignBotToUser", ReplyAction="http://tempuri.org/IBOTService/AssignBotToUserResponse")]
        System.Threading.Tasks.Task<int> AssignBotToUserAsync(string strBotId, string strUserId, string createdby, int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AssignQueueToBot", ReplyAction="http://tempuri.org/IBOTService/AssignQueueToBotResponse")]
        int AssignQueueToBot(string strBotId, string queuename, string createdby, int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AssignQueueToBot", ReplyAction="http://tempuri.org/IBOTService/AssignQueueToBotResponse")]
        System.Threading.Tasks.Task<int> AssignQueueToBotAsync(string strBotId, string queuename, string createdby, int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetBots", ReplyAction="http://tempuri.org/IBOTService/GetBotsResponse")]
        System.Data.DataTable GetBots(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetBots", ReplyAction="http://tempuri.org/IBOTService/GetBotsResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetBotsAsync(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetGroups", ReplyAction="http://tempuri.org/IBOTService/GetGroupsResponse")]
        System.Data.DataTable GetGroups(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetGroups", ReplyAction="http://tempuri.org/IBOTService/GetGroupsResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetGroupsAsync(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetConfigParameters", ReplyAction="http://tempuri.org/IBOTService/GetConfigParametersResponse")]
        System.Data.DataTable GetConfigParameters(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetConfigParameters", ReplyAction="http://tempuri.org/IBOTService/GetConfigParametersResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetConfigParametersAsync(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetQueues", ReplyAction="http://tempuri.org/IBOTService/GetQueuesResponse")]
        System.Data.DataTable GetQueues(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetQueues", ReplyAction="http://tempuri.org/IBOTService/GetQueuesResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetQueuesAsync(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetDashboardBots", ReplyAction="http://tempuri.org/IBOTService/GetDashboardBotsResponse")]
        System.Data.DataTable GetDashboardBots(int groupid, int tenantid, string userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetDashboardBots", ReplyAction="http://tempuri.org/IBOTService/GetDashboardBotsResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetDashboardBotsAsync(int groupid, int tenantid, string userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetQueueToBotMapping", ReplyAction="http://tempuri.org/IBOTService/GetQueueToBotMappingResponse")]
        System.Data.DataTable GetQueueToBotMapping(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetQueueToBotMapping", ReplyAction="http://tempuri.org/IBOTService/GetQueueToBotMappingResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetQueueToBotMappingAsync(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetUserToBotMapping", ReplyAction="http://tempuri.org/IBOTService/GetUserToBotMappingResponse")]
        System.Data.DataTable GetUserToBotMapping(string userid, int groupid, int TenantId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetUserToBotMapping", ReplyAction="http://tempuri.org/IBOTService/GetUserToBotMappingResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetUserToBotMappingAsync(string userid, int groupid, int TenantId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetBotStartDetails", ReplyAction="http://tempuri.org/IBOTService/GetBotStartDetailsResponse")]
        System.Data.DataTable GetBotStartDetails(string botname, string MachineName, int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetBotStartDetails", ReplyAction="http://tempuri.org/IBOTService/GetBotStartDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetBotStartDetailsAsync(string botname, string MachineName, int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetBotStartDetailsFromDesktop", ReplyAction="http://tempuri.org/IBOTService/GetBotStartDetailsFromDesktopResponse")]
        System.Data.DataTable GetBotStartDetailsFromDesktop(string userid, string machinename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetBotStartDetailsFromDesktop", ReplyAction="http://tempuri.org/IBOTService/GetBotStartDetailsFromDesktopResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetBotStartDetailsFromDesktopAsync(string userid, string machinename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetStompDetails", ReplyAction="http://tempuri.org/IBOTService/GetStompDetailsResponse")]
        System.Data.DataTable GetStompDetails(string botid, int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetStompDetails", ReplyAction="http://tempuri.org/IBOTService/GetStompDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetStompDetailsAsync(string botid, int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetRQDetails", ReplyAction="http://tempuri.org/IBOTService/GetRQDetailsResponse")]
        System.Data.DataTable GetRQDetails(string botid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetRQDetails", ReplyAction="http://tempuri.org/IBOTService/GetRQDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetRQDetailsAsync(string botid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetLogsForDashboardBots", ReplyAction="http://tempuri.org/IBOTService/GetLogsForDashboardBotsResponse")]
        System.Data.DataTable GetLogsForDashboardBots(string strbotid, string strmachinename, string StartTime, string EndTime, int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetLogsForDashboardBots", ReplyAction="http://tempuri.org/IBOTService/GetLogsForDashboardBotsResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetLogsForDashboardBotsAsync(string strbotid, string strmachinename, string StartTime, string EndTime, int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetUsers", ReplyAction="http://tempuri.org/IBOTService/GetUsersResponse")]
        System.Data.DataTable GetUsers(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetUsers", ReplyAction="http://tempuri.org/IBOTService/GetUsersResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetUsersAsync(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetAllTenants", ReplyAction="http://tempuri.org/IBOTService/GetAllTenantsResponse")]
        System.Data.DataTable GetAllTenants(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetAllTenants", ReplyAction="http://tempuri.org/IBOTService/GetAllTenantsResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetAllTenantsAsync(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/InsertIntoLogger", ReplyAction="http://tempuri.org/IBOTService/InsertIntoLoggerResponse")]
        int InsertIntoLogger(string MachineName, string UserName, string RobotName, string ProcessName, System.DateTime dateUtc, string Logger, string Message, int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/InsertIntoLogger", ReplyAction="http://tempuri.org/IBOTService/InsertIntoLoggerResponse")]
        System.Threading.Tasks.Task<int> InsertIntoLoggerAsync(string MachineName, string UserName, string RobotName, string ProcessName, System.DateTime dateUtc, string Logger, string Message, int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetLog", ReplyAction="http://tempuri.org/IBOTService/GetLogResponse")]
        System.Data.DataTable GetLog(string userid, int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetLog", ReplyAction="http://tempuri.org/IBOTService/GetLogResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetLogAsync(string userid, int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetAuditTrail", ReplyAction="http://tempuri.org/IBOTService/GetAuditTrailResponse")]
        System.Data.DataTable GetAuditTrail(int groupid, int tenantid, string userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetAuditTrail", ReplyAction="http://tempuri.org/IBOTService/GetAuditTrailResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetAuditTrailAsync(int groupid, int tenantid, string userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetData", ReplyAction="http://tempuri.org/IBOTService/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetData", ReplyAction="http://tempuri.org/IBOTService/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IBOTService/GetDataUsingDataContractResponse")]
        Logger.ServiceReference1.CompositeType GetDataUsingDataContract(Logger.ServiceReference1.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IBOTService/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<Logger.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(Logger.ServiceReference1.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/LogDataToDB", ReplyAction="http://tempuri.org/IBOTService/LogDataToDBResponse")]
        void LogDataToDB(System.Data.DataTable LogData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/LogDataToDB", ReplyAction="http://tempuri.org/IBOTService/LogDataToDBResponse")]
        System.Threading.Tasks.Task LogDataToDBAsync(System.Data.DataTable LogData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetProcessDetails", ReplyAction="http://tempuri.org/IBOTService/GetProcessDetailsResponse")]
        System.Data.DataTable GetProcessDetails(string ProcessName, string groupname, string tenantname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetProcessDetails", ReplyAction="http://tempuri.org/IBOTService/GetProcessDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetProcessDetailsAsync(string ProcessName, string groupname, string tenantname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DownloadAutomationZipBinary", ReplyAction="http://tempuri.org/IBOTService/DownloadAutomationZipBinaryResponse")]
        System.Data.DataTable DownloadAutomationZipBinary(string ProcessName, string ProcessVersion, string AutomationGroupName, string TenantName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DownloadAutomationZipBinary", ReplyAction="http://tempuri.org/IBOTService/DownloadAutomationZipBinaryResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> DownloadAutomationZipBinaryAsync(string ProcessName, string ProcessVersion, string AutomationGroupName, string TenantName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetProcessDataWitoutZipFile", ReplyAction="http://tempuri.org/IBOTService/GetProcessDataWitoutZipFileResponse")]
        System.Data.DataTable GetProcessDataWitoutZipFile(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetProcessDataWitoutZipFile", ReplyAction="http://tempuri.org/IBOTService/GetProcessDataWitoutZipFileResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetProcessDataWitoutZipFileAsync(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/LoadProcessVersion", ReplyAction="http://tempuri.org/IBOTService/LoadProcessVersionResponse")]
        System.Data.DataTable LoadProcessVersion(int groupid, int tenantid, string ProcessId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/LoadProcessVersion", ReplyAction="http://tempuri.org/IBOTService/LoadProcessVersionResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> LoadProcessVersionAsync(int groupid, int tenantid, string ProcessId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteGroupWithAllRelatedData", ReplyAction="http://tempuri.org/IBOTService/DeleteGroupWithAllRelatedDataResponse")]
        int DeleteGroupWithAllRelatedData(int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteGroupWithAllRelatedData", ReplyAction="http://tempuri.org/IBOTService/DeleteGroupWithAllRelatedDataResponse")]
        System.Threading.Tasks.Task<int> DeleteGroupWithAllRelatedDataAsync(int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/UpdateIsactiveStatusGroupRelatedTables", ReplyAction="http://tempuri.org/IBOTService/UpdateIsactiveStatusGroupRelatedTablesResponse")]
        int UpdateIsactiveStatusGroupRelatedTables(int groupid, int isactive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/UpdateIsactiveStatusGroupRelatedTables", ReplyAction="http://tempuri.org/IBOTService/UpdateIsactiveStatusGroupRelatedTablesResponse")]
        System.Threading.Tasks.Task<int> UpdateIsactiveStatusGroupRelatedTablesAsync(int groupid, int isactive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/CheckIsactiveStatusGroup", ReplyAction="http://tempuri.org/IBOTService/CheckIsactiveStatusGroupResponse")]
        int CheckIsactiveStatusGroup(int groupid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/CheckIsactiveStatusGroup", ReplyAction="http://tempuri.org/IBOTService/CheckIsactiveStatusGroupResponse")]
        System.Threading.Tasks.Task<int> CheckIsactiveStatusGroupAsync(int groupid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetCountToDeleteGroup", ReplyAction="http://tempuri.org/IBOTService/GetCountToDeleteGroupResponse")]
        System.Data.DataTable GetCountToDeleteGroup(int groupid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetCountToDeleteGroup", ReplyAction="http://tempuri.org/IBOTService/GetCountToDeleteGroupResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetCountToDeleteGroupAsync(int groupid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteQueue", ReplyAction="http://tempuri.org/IBOTService/DeleteQueueResponse")]
        int DeleteQueue(string queueName, int tenantid, int groupid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteQueue", ReplyAction="http://tempuri.org/IBOTService/DeleteQueueResponse")]
        System.Threading.Tasks.Task<int> DeleteQueueAsync(string queueName, int tenantid, int groupid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/PurgeQueue", ReplyAction="http://tempuri.org/IBOTService/PurgeQueueResponse")]
        int PurgeQueue(string queueName, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/PurgeQueue", ReplyAction="http://tempuri.org/IBOTService/PurgeQueueResponse")]
        System.Threading.Tasks.Task<int> PurgeQueueAsync(string queueName, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddQueue", ReplyAction="http://tempuri.org/IBOTService/AddQueueResponse")]
        int AddQueue(string queueName, string exchangeName, int tenantid, int groupid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddQueue", ReplyAction="http://tempuri.org/IBOTService/AddQueueResponse")]
        System.Threading.Tasks.Task<int> AddQueueAsync(string queueName, string exchangeName, int tenantid, int groupid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/getQueueNames", ReplyAction="http://tempuri.org/IBOTService/getQueueNamesResponse")]
        System.Data.DataTable getQueueNames(int tenantid, int groupid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/getQueueNames", ReplyAction="http://tempuri.org/IBOTService/getQueueNamesResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> getQueueNamesAsync(int tenantid, int groupid);
        
        // CODEGEN: Generating message contract since the wrapper name (GetCredentials) of message GetCredentialsRequest does not match the default value (GetCredentials1)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetCredentials", ReplyAction="http://tempuri.org/IBOTService/GetCredentialsResponse")]
        Logger.ServiceReference1.GetCredentialsResponse GetCredentials1(Logger.ServiceReference1.GetCredentialsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetCredentials", ReplyAction="http://tempuri.org/IBOTService/GetCredentialsResponse")]
        System.Threading.Tasks.Task<Logger.ServiceReference1.GetCredentialsResponse> GetCredentials1Async(Logger.ServiceReference1.GetCredentialsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetProcessQMapping", ReplyAction="http://tempuri.org/IBOTService/GetProcessQMappingResponse")]
        System.Data.DataTable GetProcessQMapping(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetProcessQMapping", ReplyAction="http://tempuri.org/IBOTService/GetProcessQMappingResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetProcessQMappingAsync(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddProcessQueueMapping", ReplyAction="http://tempuri.org/IBOTService/AddProcessQueueMappingResponse")]
        int AddProcessQueueMapping(string processName, string groupName, string tenantName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddProcessQueueMapping", ReplyAction="http://tempuri.org/IBOTService/AddProcessQueueMappingResponse")]
        System.Threading.Tasks.Task<int> AddProcessQueueMappingAsync(string processName, string groupName, string tenantName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/deleteprocessQMapping", ReplyAction="http://tempuri.org/IBOTService/deleteprocessQMappingResponse")]
        int deleteprocessQMapping(string processname, int GroupId, int TenanatId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/deleteprocessQMapping", ReplyAction="http://tempuri.org/IBOTService/deleteprocessQMappingResponse")]
        System.Threading.Tasks.Task<int> deleteprocessQMappingAsync(string processname, int GroupId, int TenanatId);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCredentials", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetCredentialsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string credentialName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int TenantId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public int groupid;
        
        public GetCredentialsRequest() {
        }
        
        public GetCredentialsRequest(string credentialName, int TenantId, int groupid) {
            this.credentialName = credentialName;
            this.TenantId = TenantId;
            this.groupid = groupid;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCredentialsResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetCredentialsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Data.DataTable GetCredentialsResult;
        
        public GetCredentialsResponse() {
        }
        
        public GetCredentialsResponse(System.Data.DataTable GetCredentialsResult) {
            this.GetCredentialsResult = GetCredentialsResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBOTServiceChannel : Logger.ServiceReference1.IBOTService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BOTServiceClient : System.ServiceModel.ClientBase<Logger.ServiceReference1.IBOTService>, Logger.ServiceReference1.IBOTService {
        
        public BOTServiceClient() {
        }
        
        public BOTServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BOTServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BOTServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BOTServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string getKey() {
            return base.Channel.getKey();
        }
        
        public System.Threading.Tasks.Task<string> getKeyAsync() {
            return base.Channel.getKeyAsync();
        }
        
        public int DeleteCredential(int id, int groupid, int tenantid, string CredentialName, string user) {
            return base.Channel.DeleteCredential(id, groupid, tenantid, CredentialName, user);
        }
        
        public System.Threading.Tasks.Task<int> DeleteCredentialAsync(int id, int groupid, int tenantid, string CredentialName, string user) {
            return base.Channel.DeleteCredentialAsync(id, groupid, tenantid, CredentialName, user);
        }
        
        public int DeleteAsset(int id, int groupid, int tenantid, string AssetName, string user) {
            return base.Channel.DeleteAsset(id, groupid, tenantid, AssetName, user);
        }
        
        public System.Threading.Tasks.Task<int> DeleteAssetAsync(int id, int groupid, int tenantid, string AssetName, string user) {
            return base.Channel.DeleteAssetAsync(id, groupid, tenantid, AssetName, user);
        }
        
        public System.Data.DataTable getCredentials(int groupid, int tenantid) {
            return base.Channel.getCredentials(groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> getCredentialsAsync(int groupid, int tenantid) {
            return base.Channel.getCredentialsAsync(groupid, tenantid);
        }
        
        public System.Data.DataTable getAssets(int groupid, int tenantid) {
            return base.Channel.getAssets(groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> getAssetsAsync(int groupid, int tenantid) {
            return base.Channel.getAssetsAsync(groupid, tenantid);
        }
        
        public int AddCredentials(string strAssetName, string strUserName, string Encrypted_Pwd, int tenantid, int groupid, string strcreatedBy) {
            return base.Channel.AddCredentials(strAssetName, strUserName, Encrypted_Pwd, tenantid, groupid, strcreatedBy);
        }
        
        public System.Threading.Tasks.Task<int> AddCredentialsAsync(string strAssetName, string strUserName, string Encrypted_Pwd, int tenantid, int groupid, string strcreatedBy) {
            return base.Channel.AddCredentialsAsync(strAssetName, strUserName, Encrypted_Pwd, tenantid, groupid, strcreatedBy);
        }
        
        public int AddAssets(string strAssetName, string strValue, int tenantid, int groupid, string strcreatedBy) {
            return base.Channel.AddAssets(strAssetName, strValue, tenantid, groupid, strcreatedBy);
        }
        
        public System.Threading.Tasks.Task<int> AddAssetsAsync(string strAssetName, string strValue, int tenantid, int groupid, string strcreatedBy) {
            return base.Channel.AddAssetsAsync(strAssetName, strValue, tenantid, groupid, strcreatedBy);
        }
        
        public int getRoleId(int TenantId, string rolename, int groupid) {
            return base.Channel.getRoleId(TenantId, rolename, groupid);
        }
        
        public System.Threading.Tasks.Task<int> getRoleIdAsync(int TenantId, string rolename, int groupid) {
            return base.Channel.getRoleIdAsync(TenantId, rolename, groupid);
        }
        
        public System.Data.DataTable getRoleType(string groupname, int groupid, int tenantid) {
            return base.Channel.getRoleType(groupname, groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> getRoleTypeAsync(string groupname, int groupid, int tenantid) {
            return base.Channel.getRoleTypeAsync(groupname, groupid, tenantid);
        }
        
        public System.Data.DataTable getGrounNames(int tenantid) {
            return base.Channel.getGrounNames(tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> getGrounNamesAsync(int tenantid) {
            return base.Channel.getGrounNamesAsync(tenantid);
        }
        
        public string GetQueueItem(string iGroupName, string iTenantName, string iQueueName) {
            return base.Channel.GetQueueItem(iGroupName, iTenantName, iQueueName);
        }
        
        public System.Threading.Tasks.Task<string> GetQueueItemAsync(string iGroupName, string iTenantName, string iQueueName) {
            return base.Channel.GetQueueItemAsync(iGroupName, iTenantName, iQueueName);
        }
        
        public int SaveRoleAccess(
                    string roleName, 
                    int roleid, 
                    int tenantid, 
                    string role, 
                    bool bBotDashboardR, 
                    bool bBotDashboardC, 
                    bool bBotDashboardE, 
                    bool bBotDashboardD, 
                    bool bqueueR, 
                    bool bqueueC, 
                    bool bqueueE, 
                    bool bqueueD, 
                    bool bAddScheduleR, 
                    bool bAddScheduleC, 
                    bool bAddScheduleE, 
                    bool bAddScheduleD, 
                    bool bAddUserR, 
                    bool bAddUserC, 
                    bool bAddUserE, 
                    bool bAddUserD, 
                    bool bAddRobotR, 
                    bool bAddRobotC, 
                    bool bAddRobotE, 
                    bool bAddRobotD, 
                    bool bQueueManagementR, 
                    bool bQueueManagementC, 
                    bool bQueueManagementE, 
                    bool bQueueManagementD, 
                    bool bAssignQueueBotR, 
                    bool bAssignQueueBotC, 
                    bool bAssignQueueBotE, 
                    bool bAssignQueueBotD, 
                    bool bAssignBotUserR, 
                    bool bAssignBotUserC, 
                    bool bAssignBotUserE, 
                    bool bAssignBotUserD, 
                    bool bBotLogR, 
                    bool bBotLogC, 
                    bool bBotLogE, 
                    bool bBotLogD, 
                    bool bAuditTrailR, 
                    bool bAuditTrailC, 
                    bool bAuditTrailE, 
                    bool bAuditTrailD, 
                    bool bScheduleDetailsR, 
                    bool bScheduleDetailsC, 
                    bool bScheduleDetailsE, 
                    bool bScheduleDetailsD, 
                    bool bConfigurationR, 
                    bool bConfigurationC, 
                    bool bConfigurationE, 
                    bool bConfigurationD, 
                    bool bProcessManagementR, 
                    bool bProcessManagementC, 
                    bool bProcessManagementE, 
                    bool bProcessManagementD, 
                    bool bDetailLogR, 
                    bool bDetailLogC, 
                    bool bDetailLogE, 
                    bool bDetailLogD, 
                    bool bPromoteDemoteR, 
                    bool bPromoteDemoteC, 
                    bool bPromoteDemoteE, 
                    bool bPromoteDemoteD) {
            return base.Channel.SaveRoleAccess(roleName, roleid, tenantid, role, bBotDashboardR, bBotDashboardC, bBotDashboardE, bBotDashboardD, bqueueR, bqueueC, bqueueE, bqueueD, bAddScheduleR, bAddScheduleC, bAddScheduleE, bAddScheduleD, bAddUserR, bAddUserC, bAddUserE, bAddUserD, bAddRobotR, bAddRobotC, bAddRobotE, bAddRobotD, bQueueManagementR, bQueueManagementC, bQueueManagementE, bQueueManagementD, bAssignQueueBotR, bAssignQueueBotC, bAssignQueueBotE, bAssignQueueBotD, bAssignBotUserR, bAssignBotUserC, bAssignBotUserE, bAssignBotUserD, bBotLogR, bBotLogC, bBotLogE, bBotLogD, bAuditTrailR, bAuditTrailC, bAuditTrailE, bAuditTrailD, bScheduleDetailsR, bScheduleDetailsC, bScheduleDetailsE, bScheduleDetailsD, bConfigurationR, bConfigurationC, bConfigurationE, bConfigurationD, bProcessManagementR, bProcessManagementC, bProcessManagementE, bProcessManagementD, bDetailLogR, bDetailLogC, bDetailLogE, bDetailLogD, bPromoteDemoteR, bPromoteDemoteC, bPromoteDemoteE, bPromoteDemoteD);
        }
        
        public System.Threading.Tasks.Task<int> SaveRoleAccessAsync(
                    string roleName, 
                    int roleid, 
                    int tenantid, 
                    string role, 
                    bool bBotDashboardR, 
                    bool bBotDashboardC, 
                    bool bBotDashboardE, 
                    bool bBotDashboardD, 
                    bool bqueueR, 
                    bool bqueueC, 
                    bool bqueueE, 
                    bool bqueueD, 
                    bool bAddScheduleR, 
                    bool bAddScheduleC, 
                    bool bAddScheduleE, 
                    bool bAddScheduleD, 
                    bool bAddUserR, 
                    bool bAddUserC, 
                    bool bAddUserE, 
                    bool bAddUserD, 
                    bool bAddRobotR, 
                    bool bAddRobotC, 
                    bool bAddRobotE, 
                    bool bAddRobotD, 
                    bool bQueueManagementR, 
                    bool bQueueManagementC, 
                    bool bQueueManagementE, 
                    bool bQueueManagementD, 
                    bool bAssignQueueBotR, 
                    bool bAssignQueueBotC, 
                    bool bAssignQueueBotE, 
                    bool bAssignQueueBotD, 
                    bool bAssignBotUserR, 
                    bool bAssignBotUserC, 
                    bool bAssignBotUserE, 
                    bool bAssignBotUserD, 
                    bool bBotLogR, 
                    bool bBotLogC, 
                    bool bBotLogE, 
                    bool bBotLogD, 
                    bool bAuditTrailR, 
                    bool bAuditTrailC, 
                    bool bAuditTrailE, 
                    bool bAuditTrailD, 
                    bool bScheduleDetailsR, 
                    bool bScheduleDetailsC, 
                    bool bScheduleDetailsE, 
                    bool bScheduleDetailsD, 
                    bool bConfigurationR, 
                    bool bConfigurationC, 
                    bool bConfigurationE, 
                    bool bConfigurationD, 
                    bool bProcessManagementR, 
                    bool bProcessManagementC, 
                    bool bProcessManagementE, 
                    bool bProcessManagementD, 
                    bool bDetailLogR, 
                    bool bDetailLogC, 
                    bool bDetailLogE, 
                    bool bDetailLogD, 
                    bool bPromoteDemoteR, 
                    bool bPromoteDemoteC, 
                    bool bPromoteDemoteE, 
                    bool bPromoteDemoteD) {
            return base.Channel.SaveRoleAccessAsync(roleName, roleid, tenantid, role, bBotDashboardR, bBotDashboardC, bBotDashboardE, bBotDashboardD, bqueueR, bqueueC, bqueueE, bqueueD, bAddScheduleR, bAddScheduleC, bAddScheduleE, bAddScheduleD, bAddUserR, bAddUserC, bAddUserE, bAddUserD, bAddRobotR, bAddRobotC, bAddRobotE, bAddRobotD, bQueueManagementR, bQueueManagementC, bQueueManagementE, bQueueManagementD, bAssignQueueBotR, bAssignQueueBotC, bAssignQueueBotE, bAssignQueueBotD, bAssignBotUserR, bAssignBotUserC, bAssignBotUserE, bAssignBotUserD, bBotLogR, bBotLogC, bBotLogE, bBotLogD, bAuditTrailR, bAuditTrailC, bAuditTrailE, bAuditTrailD, bScheduleDetailsR, bScheduleDetailsC, bScheduleDetailsE, bScheduleDetailsD, bConfigurationR, bConfigurationC, bConfigurationE, bConfigurationD, bProcessManagementR, bProcessManagementC, bProcessManagementE, bProcessManagementD, bDetailLogR, bDetailLogC, bDetailLogE, bDetailLogD, bPromoteDemoteR, bPromoteDemoteC, bPromoteDemoteE, bPromoteDemoteD);
        }
        
        public System.Data.DataTable getRoledata(int tenantid) {
            return base.Channel.getRoledata(tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> getRoledataAsync(int tenantid) {
            return base.Channel.getRoledataAsync(tenantid);
        }
        
        public System.Data.DataTable GetRoleAccess(int roleid, int groupid, int tenantid, string roleName) {
            return base.Channel.GetRoleAccess(roleid, groupid, tenantid, roleName);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetRoleAccessAsync(int roleid, int groupid, int tenantid, string roleName) {
            return base.Channel.GetRoleAccessAsync(roleid, groupid, tenantid, roleName);
        }
        
        public int AddRole(string roleName, int groupid, int tenantid, string createdby, string groupname) {
            return base.Channel.AddRole(roleName, groupid, tenantid, createdby, groupname);
        }
        
        public System.Threading.Tasks.Task<int> AddRoleAsync(string roleName, int groupid, int tenantid, string createdby, string groupname) {
            return base.Channel.AddRoleAsync(roleName, groupid, tenantid, createdby, groupname);
        }
        
        public System.Data.DataTable GetCredentialsActivity(string credentialName, int TenantId, int groupid) {
            return base.Channel.GetCredentialsActivity(credentialName, TenantId, groupid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetCredentialsActivityAsync(string credentialName, int TenantId, int groupid) {
            return base.Channel.GetCredentialsActivityAsync(credentialName, TenantId, groupid);
        }
        
        public System.Data.DataTable GetAssetsActivity(string assetname, int TenantId, int groupid) {
            return base.Channel.GetAssetsActivity(assetname, TenantId, groupid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetAssetsActivityAsync(string assetname, int TenantId, int groupid) {
            return base.Channel.GetAssetsActivityAsync(assetname, TenantId, groupid);
        }
        
        public System.Data.DataTable getMicrosoftOCR() {
            return base.Channel.getMicrosoftOCR();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> getMicrosoftOCRAsync() {
            return base.Channel.getMicrosoftOCRAsync();
        }
        
        public int DeleteProcessSchedule(string strId, string strprocessename, string strBotName, string strChronExp, int groupid, int tenantid, string createdby) {
            return base.Channel.DeleteProcessSchedule(strId, strprocessename, strBotName, strChronExp, groupid, tenantid, createdby);
        }
        
        public System.Threading.Tasks.Task<int> DeleteProcessScheduleAsync(string strId, string strprocessename, string strBotName, string strChronExp, int groupid, int tenantid, string createdby) {
            return base.Channel.DeleteProcessScheduleAsync(strId, strprocessename, strBotName, strChronExp, groupid, tenantid, createdby);
        }
        
        public System.Data.DataTable GetProcessSchedules(int groupid, int tenantid) {
            return base.Channel.GetProcessSchedules(groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetProcessSchedulesAsync(int groupid, int tenantid) {
            return base.Channel.GetProcessSchedulesAsync(groupid, tenantid);
        }
        
        public int updateBotNameTouserBotMapping(int groupid, int tenantid, string botname, string username) {
            return base.Channel.updateBotNameTouserBotMapping(groupid, tenantid, botname, username);
        }
        
        public System.Threading.Tasks.Task<int> updateBotNameTouserBotMappingAsync(int groupid, int tenantid, string botname, string username) {
            return base.Channel.updateBotNameTouserBotMappingAsync(groupid, tenantid, botname, username);
        }
        
        public int updateQueueToBotMapping(int groupid, int tenantid, string botname, string QueueName) {
            return base.Channel.updateQueueToBotMapping(groupid, tenantid, botname, QueueName);
        }
        
        public System.Threading.Tasks.Task<int> updateQueueToBotMappingAsync(int groupid, int tenantid, string botname, string QueueName) {
            return base.Channel.updateQueueToBotMappingAsync(groupid, tenantid, botname, QueueName);
        }
        
        public int ChangeGroup(string currentRoleCG, string userName, string newRole, int tenantid) {
            return base.Channel.ChangeGroup(currentRoleCG, userName, newRole, tenantid);
        }
        
        public System.Threading.Tasks.Task<int> ChangeGroupAsync(string currentRoleCG, string userName, string newRole, int tenantid) {
            return base.Channel.ChangeGroupAsync(currentRoleCG, userName, newRole, tenantid);
        }
        
        public int UpdateIsactiveStatusTenantRelatedTables(int tenantid, int isactive) {
            return base.Channel.UpdateIsactiveStatusTenantRelatedTables(tenantid, isactive);
        }
        
        public System.Threading.Tasks.Task<int> UpdateIsactiveStatusTenantRelatedTablesAsync(int tenantid, int isactive) {
            return base.Channel.UpdateIsactiveStatusTenantRelatedTablesAsync(tenantid, isactive);
        }
        
        public int CheckIsactiveStatusTenant(int tenantid) {
            return base.Channel.CheckIsactiveStatusTenant(tenantid);
        }
        
        public System.Threading.Tasks.Task<int> CheckIsactiveStatusTenantAsync(int tenantid) {
            return base.Channel.CheckIsactiveStatusTenantAsync(tenantid);
        }
        
        public int DeleteBot(string botname, int groupid, int tenantid, string createdby) {
            return base.Channel.DeleteBot(botname, groupid, tenantid, createdby);
        }
        
        public System.Threading.Tasks.Task<int> DeleteBotAsync(string botname, int groupid, int tenantid, string createdby) {
            return base.Channel.DeleteBotAsync(botname, groupid, tenantid, createdby);
        }
        
        public int CheckScheduleStatus(string botname, int tenantid) {
            return base.Channel.CheckScheduleStatus(botname, tenantid);
        }
        
        public System.Threading.Tasks.Task<int> CheckScheduleStatusAsync(string botname, int tenantid) {
            return base.Channel.CheckScheduleStatusAsync(botname, tenantid);
        }
        
        public System.Data.DataTable GetCountScheduleRelatedBot(int tenantid, string botName) {
            return base.Channel.GetCountScheduleRelatedBot(tenantid, botName);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetCountScheduleRelatedBotAsync(int tenantid, string botName) {
            return base.Channel.GetCountScheduleRelatedBotAsync(tenantid, botName);
        }
        
        public int insertLog(string Message, string detailLog, int groupid, int tenantid) {
            return base.Channel.insertLog(Message, detailLog, groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<int> insertLogAsync(string Message, string detailLog, int groupid, int tenantid) {
            return base.Channel.insertLogAsync(Message, detailLog, groupid, tenantid);
        }
        
        public System.Data.DataTable getMonthlyChartData(string status) {
            return base.Channel.getMonthlyChartData(status);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> getMonthlyChartDataAsync(string status) {
            return base.Channel.getMonthlyChartDataAsync(status);
        }
        
        public System.Data.DataTable GetData_createschedulestatus() {
            return base.Channel.GetData_createschedulestatus();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetData_createschedulestatusAsync() {
            return base.Channel.GetData_createschedulestatusAsync();
        }
        
        public System.Data.DataTable GetddlData_createschedulestatus() {
            return base.Channel.GetddlData_createschedulestatus();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetddlData_createschedulestatusAsync() {
            return base.Channel.GetddlData_createschedulestatusAsync();
        }
        
        public System.Data.DataTable getChartData(string status) {
            return base.Channel.getChartData(status);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> getChartDataAsync(string status) {
            return base.Channel.getChartDataAsync(status);
        }
        
        public System.Data.DataTable getDoughnutChartData() {
            return base.Channel.getDoughnutChartData();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> getDoughnutChartDataAsync() {
            return base.Channel.getDoughnutChartDataAsync();
        }
        
        public int insertActivityLog(string domainName, string userName, string groupName, string action, int groupid, int tenantid) {
            return base.Channel.insertActivityLog(domainName, userName, groupName, action, groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<int> insertActivityLogAsync(string domainName, string userName, string groupName, string action, int groupid, int tenantid) {
            return base.Channel.insertActivityLogAsync(domainName, userName, groupName, action, groupid, tenantid);
        }
        
        public int PiyushLogs(string Message) {
            return base.Channel.PiyushLogs(Message);
        }
        
        public System.Threading.Tasks.Task<int> PiyushLogsAsync(string Message) {
            return base.Channel.PiyushLogsAsync(Message);
        }
        
        public System.Data.DataTable GetRQDetailsForBotDashboard(int groupid, int tenantid) {
            return base.Channel.GetRQDetailsForBotDashboard(groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetRQDetailsForBotDashboardAsync(int groupid, int tenantid) {
            return base.Channel.GetRQDetailsForBotDashboardAsync(groupid, tenantid);
        }
        
        public int DeleteTenantWithAllRelatedData(int groupid, int tenantid, string createdby) {
            return base.Channel.DeleteTenantWithAllRelatedData(groupid, tenantid, createdby);
        }
        
        public System.Threading.Tasks.Task<int> DeleteTenantWithAllRelatedDataAsync(int groupid, int tenantid, string createdby) {
            return base.Channel.DeleteTenantWithAllRelatedDataAsync(groupid, tenantid, createdby);
        }
        
        public System.Data.DataTable GetCountToDeleteTenant(int tenantid) {
            return base.Channel.GetCountToDeleteTenant(tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetCountToDeleteTenantAsync(int tenantid) {
            return base.Channel.GetCountToDeleteTenantAsync(tenantid);
        }
        
        public System.Data.DataTable getActivityLog(int groupid, int tenantid) {
            return base.Channel.getActivityLog(groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> getActivityLogAsync(int groupid, int tenantid) {
            return base.Channel.getActivityLogAsync(groupid, tenantid);
        }
        
        public System.Data.DataTable getCompleteLogs(int groupid, int tenantid) {
            return base.Channel.getCompleteLogs(groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> getCompleteLogsAsync(int groupid, int tenantid) {
            return base.Channel.getCompleteLogsAsync(groupid, tenantid);
        }
        
        public int[] GetDetailsDashboard(int groupid, int tenantid) {
            return base.Channel.GetDetailsDashboard(groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<int[]> GetDetailsDashboardAsync(int groupid, int tenantid) {
            return base.Channel.GetDetailsDashboardAsync(groupid, tenantid);
        }
        
        public int UpdateUserPassword(string userid, string OldPassword, string NewPassword, int groupid, int tenantid) {
            return base.Channel.UpdateUserPassword(userid, OldPassword, NewPassword, groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<int> UpdateUserPasswordAsync(string userid, string OldPassword, string NewPassword, int groupid, int tenantid) {
            return base.Channel.UpdateUserPasswordAsync(userid, OldPassword, NewPassword, groupid, tenantid);
        }
        
        public int CreateScheduleStatus(string QueueName, string BotName, string ChronExpression, string Status, int GroupId, int TenantId, string StartTime, string EndTime) {
            return base.Channel.CreateScheduleStatus(QueueName, BotName, ChronExpression, Status, GroupId, TenantId, StartTime, EndTime);
        }
        
        public System.Threading.Tasks.Task<int> CreateScheduleStatusAsync(string QueueName, string BotName, string ChronExpression, string Status, int GroupId, int TenantId, string StartTime, string EndTime) {
            return base.Channel.CreateScheduleStatusAsync(QueueName, BotName, ChronExpression, Status, GroupId, TenantId, StartTime, EndTime);
        }
        
        public System.Data.DataTable GetScheduleStatus(int groupid, int tenantid, string status) {
            return base.Channel.GetScheduleStatus(groupid, tenantid, status);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetScheduleStatusAsync(int groupid, int tenantid, string status) {
            return base.Channel.GetScheduleStatusAsync(groupid, tenantid, status);
        }
        
        public int AddSchedule(string strQueueName, string strBotName, string strChronExp, string stopAfter, int groupid, int tenantid, string createdby) {
            return base.Channel.AddSchedule(strQueueName, strBotName, strChronExp, stopAfter, groupid, tenantid, createdby);
        }
        
        public System.Threading.Tasks.Task<int> AddScheduleAsync(string strQueueName, string strBotName, string strChronExp, string stopAfter, int groupid, int tenantid, string createdby) {
            return base.Channel.AddScheduleAsync(strQueueName, strBotName, strChronExp, stopAfter, groupid, tenantid, createdby);
        }
        
        public int AddScheduleForProcess(string strProcessName, string strBotName, string strChronExp, string StopAfter, int groupid, int tenantid, string createdby) {
            return base.Channel.AddScheduleForProcess(strProcessName, strBotName, strChronExp, StopAfter, groupid, tenantid, createdby);
        }
        
        public System.Threading.Tasks.Task<int> AddScheduleForProcessAsync(string strProcessName, string strBotName, string strChronExp, string StopAfter, int groupid, int tenantid, string createdby) {
            return base.Channel.AddScheduleForProcessAsync(strProcessName, strBotName, strChronExp, StopAfter, groupid, tenantid, createdby);
        }
        
        public int AddQueueDetails(string queueName, int groupid, int iTenantID, string createdby) {
            return base.Channel.AddQueueDetails(queueName, groupid, iTenantID, createdby);
        }
        
        public System.Threading.Tasks.Task<int> AddQueueDetailsAsync(string queueName, int groupid, int iTenantID, string createdby) {
            return base.Channel.AddQueueDetailsAsync(queueName, groupid, iTenantID, createdby);
        }
        
        public int DeleteSchedule(string strId, string strQueueName, string strBotName, string strChronExp, int groupid, int tenantid, string createdby) {
            return base.Channel.DeleteSchedule(strId, strQueueName, strBotName, strChronExp, groupid, tenantid, createdby);
        }
        
        public System.Threading.Tasks.Task<int> DeleteScheduleAsync(string strId, string strQueueName, string strBotName, string strChronExp, int groupid, int tenantid, string createdby) {
            return base.Channel.DeleteScheduleAsync(strId, strQueueName, strBotName, strChronExp, groupid, tenantid, createdby);
        }
        
        public System.Data.DataTable GetSchedules(int groupid, int tenantid) {
            return base.Channel.GetSchedules(groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetSchedulesAsync(int groupid, int tenantid) {
            return base.Channel.GetSchedulesAsync(groupid, tenantid);
        }
        
        public System.Data.DataTable GetRoleBaseAccess(int groupid, int tenantid) {
            return base.Channel.GetRoleBaseAccess(groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetRoleBaseAccessAsync(int groupid, int tenantid) {
            return base.Channel.GetRoleBaseAccessAsync(groupid, tenantid);
        }
        
        public System.Data.DataTable GetUserBaseAccess(int groupid, int tenantid) {
            return base.Channel.GetUserBaseAccess(groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetUserBaseAccessAsync(int groupid, int tenantid) {
            return base.Channel.GetUserBaseAccessAsync(groupid, tenantid);
        }
        
        public int SaveRoleBaseAccess(
                    int groupid, 
                    int tenantid, 
                    string role, 
                    bool bBotDashboardR, 
                    bool bBotDashboardC, 
                    bool bBotDashboardE, 
                    bool bBotDashboardD, 
                    bool bqueueR, 
                    bool bqueueC, 
                    bool bqueueE, 
                    bool bqueueD, 
                    bool bAddScheduleR, 
                    bool bAddScheduleC, 
                    bool bAddScheduleE, 
                    bool bAddScheduleD, 
                    bool bAddUserR, 
                    bool bAddUserC, 
                    bool bAddUserE, 
                    bool bAddUserD, 
                    bool bAddRobotR, 
                    bool bAddRobotC, 
                    bool bAddRobotE, 
                    bool bAddRobotD, 
                    bool bQueueManagementR, 
                    bool bQueueManagementC, 
                    bool bQueueManagementE, 
                    bool bQueueManagementD, 
                    bool bAssignQueueBotR, 
                    bool bAssignQueueBotC, 
                    bool bAssignQueueBotE, 
                    bool bAssignQueueBotD, 
                    bool bAssignBotUserR, 
                    bool bAssignBotUserC, 
                    bool bAssignBotUserE, 
                    bool bAssignBotUserD, 
                    bool bBotLogR, 
                    bool bBotLogC, 
                    bool bBotLogE, 
                    bool bBotLogD, 
                    bool bAuditTrailR, 
                    bool bAuditTrailC, 
                    bool bAuditTrailE, 
                    bool bAuditTrailD, 
                    bool bScheduleDetailsR, 
                    bool bScheduleDetailsC, 
                    bool bScheduleDetailsE, 
                    bool bScheduleDetailsD, 
                    bool bConfigurationR, 
                    bool bConfigurationC, 
                    bool bConfigurationE, 
                    bool bConfigurationD, 
                    bool bProcessManagementR, 
                    bool bProcessManagementC, 
                    bool bProcessManagementE, 
                    bool bProcessManagementD, 
                    bool bDetailLogR, 
                    bool bDetailLogC, 
                    bool bDetailLogE, 
                    bool bDetailLogD, 
                    bool bPromoteDemoteR, 
                    bool bPromoteDemoteC, 
                    bool bPromoteDemoteE, 
                    bool bPromoteDemoteD) {
            return base.Channel.SaveRoleBaseAccess(groupid, tenantid, role, bBotDashboardR, bBotDashboardC, bBotDashboardE, bBotDashboardD, bqueueR, bqueueC, bqueueE, bqueueD, bAddScheduleR, bAddScheduleC, bAddScheduleE, bAddScheduleD, bAddUserR, bAddUserC, bAddUserE, bAddUserD, bAddRobotR, bAddRobotC, bAddRobotE, bAddRobotD, bQueueManagementR, bQueueManagementC, bQueueManagementE, bQueueManagementD, bAssignQueueBotR, bAssignQueueBotC, bAssignQueueBotE, bAssignQueueBotD, bAssignBotUserR, bAssignBotUserC, bAssignBotUserE, bAssignBotUserD, bBotLogR, bBotLogC, bBotLogE, bBotLogD, bAuditTrailR, bAuditTrailC, bAuditTrailE, bAuditTrailD, bScheduleDetailsR, bScheduleDetailsC, bScheduleDetailsE, bScheduleDetailsD, bConfigurationR, bConfigurationC, bConfigurationE, bConfigurationD, bProcessManagementR, bProcessManagementC, bProcessManagementE, bProcessManagementD, bDetailLogR, bDetailLogC, bDetailLogE, bDetailLogD, bPromoteDemoteR, bPromoteDemoteC, bPromoteDemoteE, bPromoteDemoteD);
        }
        
        public System.Threading.Tasks.Task<int> SaveRoleBaseAccessAsync(
                    int groupid, 
                    int tenantid, 
                    string role, 
                    bool bBotDashboardR, 
                    bool bBotDashboardC, 
                    bool bBotDashboardE, 
                    bool bBotDashboardD, 
                    bool bqueueR, 
                    bool bqueueC, 
                    bool bqueueE, 
                    bool bqueueD, 
                    bool bAddScheduleR, 
                    bool bAddScheduleC, 
                    bool bAddScheduleE, 
                    bool bAddScheduleD, 
                    bool bAddUserR, 
                    bool bAddUserC, 
                    bool bAddUserE, 
                    bool bAddUserD, 
                    bool bAddRobotR, 
                    bool bAddRobotC, 
                    bool bAddRobotE, 
                    bool bAddRobotD, 
                    bool bQueueManagementR, 
                    bool bQueueManagementC, 
                    bool bQueueManagementE, 
                    bool bQueueManagementD, 
                    bool bAssignQueueBotR, 
                    bool bAssignQueueBotC, 
                    bool bAssignQueueBotE, 
                    bool bAssignQueueBotD, 
                    bool bAssignBotUserR, 
                    bool bAssignBotUserC, 
                    bool bAssignBotUserE, 
                    bool bAssignBotUserD, 
                    bool bBotLogR, 
                    bool bBotLogC, 
                    bool bBotLogE, 
                    bool bBotLogD, 
                    bool bAuditTrailR, 
                    bool bAuditTrailC, 
                    bool bAuditTrailE, 
                    bool bAuditTrailD, 
                    bool bScheduleDetailsR, 
                    bool bScheduleDetailsC, 
                    bool bScheduleDetailsE, 
                    bool bScheduleDetailsD, 
                    bool bConfigurationR, 
                    bool bConfigurationC, 
                    bool bConfigurationE, 
                    bool bConfigurationD, 
                    bool bProcessManagementR, 
                    bool bProcessManagementC, 
                    bool bProcessManagementE, 
                    bool bProcessManagementD, 
                    bool bDetailLogR, 
                    bool bDetailLogC, 
                    bool bDetailLogE, 
                    bool bDetailLogD, 
                    bool bPromoteDemoteR, 
                    bool bPromoteDemoteC, 
                    bool bPromoteDemoteE, 
                    bool bPromoteDemoteD) {
            return base.Channel.SaveRoleBaseAccessAsync(groupid, tenantid, role, bBotDashboardR, bBotDashboardC, bBotDashboardE, bBotDashboardD, bqueueR, bqueueC, bqueueE, bqueueD, bAddScheduleR, bAddScheduleC, bAddScheduleE, bAddScheduleD, bAddUserR, bAddUserC, bAddUserE, bAddUserD, bAddRobotR, bAddRobotC, bAddRobotE, bAddRobotD, bQueueManagementR, bQueueManagementC, bQueueManagementE, bQueueManagementD, bAssignQueueBotR, bAssignQueueBotC, bAssignQueueBotE, bAssignQueueBotD, bAssignBotUserR, bAssignBotUserC, bAssignBotUserE, bAssignBotUserD, bBotLogR, bBotLogC, bBotLogE, bBotLogD, bAuditTrailR, bAuditTrailC, bAuditTrailE, bAuditTrailD, bScheduleDetailsR, bScheduleDetailsC, bScheduleDetailsE, bScheduleDetailsD, bConfigurationR, bConfigurationC, bConfigurationE, bConfigurationD, bProcessManagementR, bProcessManagementC, bProcessManagementE, bProcessManagementD, bDetailLogR, bDetailLogC, bDetailLogE, bDetailLogD, bPromoteDemoteR, bPromoteDemoteC, bPromoteDemoteE, bPromoteDemoteD);
        }
        
        public System.Data.DataTable GetPageAccess(int roleid, int groupid, int tenantid, string pagename) {
            return base.Channel.GetPageAccess(roleid, groupid, tenantid, pagename);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetPageAccessAsync(int roleid, int groupid, int tenantid, string pagename) {
            return base.Channel.GetPageAccessAsync(roleid, groupid, tenantid, pagename);
        }
        
        public System.Data.DataTable GetPageAccessUser(int groupid, int tenantid, string username) {
            return base.Channel.GetPageAccessUser(groupid, tenantid, username);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetPageAccessUserAsync(int groupid, int tenantid, string username) {
            return base.Channel.GetPageAccessUserAsync(groupid, tenantid, username);
        }
        
        public int SaveRoleBaseAccessUser(
                    int IGroupID, 
                    string usernameI, 
                    int ITenantID, 
                    bool bBotDashboardR, 
                    bool bBotDashboardC, 
                    bool bBotDashboardE, 
                    bool bBotDashboardD, 
                    bool bqueueR, 
                    bool bqueueC, 
                    bool bqueueE, 
                    bool bqueueD, 
                    bool bAddScheduleR, 
                    bool bAddScheduleC, 
                    bool bAddScheduleE, 
                    bool bAddScheduleD, 
                    bool bAddUserR, 
                    bool bAddUserC, 
                    bool bAddUserE, 
                    bool bAddUserD, 
                    bool bAddRobotR, 
                    bool bAddRobotC, 
                    bool bAddRobotE, 
                    bool bAddRobotD, 
                    bool bQueueManagementR, 
                    bool bQueueManagementC, 
                    bool bQueueManagementE, 
                    bool bQueueManagementD, 
                    bool bAssignQueueBotR, 
                    bool bAssignQueueBotC, 
                    bool bAssignQueueBotE, 
                    bool bAssignQueueBotD, 
                    bool bAssignBotUserR, 
                    bool bAssignBotUserC, 
                    bool bAssignBotUserE, 
                    bool bAssignBotUserD, 
                    bool bBotLogR, 
                    bool bBotLogC, 
                    bool bBotLogE, 
                    bool bBotLogD, 
                    bool bAuditTrailR, 
                    bool bAuditTrailC, 
                    bool bAuditTrailE, 
                    bool bAuditTrailD, 
                    bool bScheduleDetailsR, 
                    bool bScheduleDetailsC, 
                    bool bScheduleDetailsE, 
                    bool bScheduleDetailsD, 
                    bool bConfigurationR, 
                    bool bConfigurationC, 
                    bool bConfigurationE, 
                    bool bConfigurationD, 
                    bool bProcessManagementR, 
                    bool bProcessManagementC, 
                    bool bProcessManagementE, 
                    bool bProcessManagementD, 
                    bool bDetailLogR, 
                    bool bDetailLogC, 
                    bool bDetailLogE, 
                    bool bDetailLogD, 
                    bool bPromoteDemoteR, 
                    bool bPromoteDemoteC, 
                    bool bPromoteDemoteE, 
                    bool bPromoteDemoteD) {
            return base.Channel.SaveRoleBaseAccessUser(IGroupID, usernameI, ITenantID, bBotDashboardR, bBotDashboardC, bBotDashboardE, bBotDashboardD, bqueueR, bqueueC, bqueueE, bqueueD, bAddScheduleR, bAddScheduleC, bAddScheduleE, bAddScheduleD, bAddUserR, bAddUserC, bAddUserE, bAddUserD, bAddRobotR, bAddRobotC, bAddRobotE, bAddRobotD, bQueueManagementR, bQueueManagementC, bQueueManagementE, bQueueManagementD, bAssignQueueBotR, bAssignQueueBotC, bAssignQueueBotE, bAssignQueueBotD, bAssignBotUserR, bAssignBotUserC, bAssignBotUserE, bAssignBotUserD, bBotLogR, bBotLogC, bBotLogE, bBotLogD, bAuditTrailR, bAuditTrailC, bAuditTrailE, bAuditTrailD, bScheduleDetailsR, bScheduleDetailsC, bScheduleDetailsE, bScheduleDetailsD, bConfigurationR, bConfigurationC, bConfigurationE, bConfigurationD, bProcessManagementR, bProcessManagementC, bProcessManagementE, bProcessManagementD, bDetailLogR, bDetailLogC, bDetailLogE, bDetailLogD, bPromoteDemoteR, bPromoteDemoteC, bPromoteDemoteE, bPromoteDemoteD);
        }
        
        public System.Threading.Tasks.Task<int> SaveRoleBaseAccessUserAsync(
                    int IGroupID, 
                    string usernameI, 
                    int ITenantID, 
                    bool bBotDashboardR, 
                    bool bBotDashboardC, 
                    bool bBotDashboardE, 
                    bool bBotDashboardD, 
                    bool bqueueR, 
                    bool bqueueC, 
                    bool bqueueE, 
                    bool bqueueD, 
                    bool bAddScheduleR, 
                    bool bAddScheduleC, 
                    bool bAddScheduleE, 
                    bool bAddScheduleD, 
                    bool bAddUserR, 
                    bool bAddUserC, 
                    bool bAddUserE, 
                    bool bAddUserD, 
                    bool bAddRobotR, 
                    bool bAddRobotC, 
                    bool bAddRobotE, 
                    bool bAddRobotD, 
                    bool bQueueManagementR, 
                    bool bQueueManagementC, 
                    bool bQueueManagementE, 
                    bool bQueueManagementD, 
                    bool bAssignQueueBotR, 
                    bool bAssignQueueBotC, 
                    bool bAssignQueueBotE, 
                    bool bAssignQueueBotD, 
                    bool bAssignBotUserR, 
                    bool bAssignBotUserC, 
                    bool bAssignBotUserE, 
                    bool bAssignBotUserD, 
                    bool bBotLogR, 
                    bool bBotLogC, 
                    bool bBotLogE, 
                    bool bBotLogD, 
                    bool bAuditTrailR, 
                    bool bAuditTrailC, 
                    bool bAuditTrailE, 
                    bool bAuditTrailD, 
                    bool bScheduleDetailsR, 
                    bool bScheduleDetailsC, 
                    bool bScheduleDetailsE, 
                    bool bScheduleDetailsD, 
                    bool bConfigurationR, 
                    bool bConfigurationC, 
                    bool bConfigurationE, 
                    bool bConfigurationD, 
                    bool bProcessManagementR, 
                    bool bProcessManagementC, 
                    bool bProcessManagementE, 
                    bool bProcessManagementD, 
                    bool bDetailLogR, 
                    bool bDetailLogC, 
                    bool bDetailLogE, 
                    bool bDetailLogD, 
                    bool bPromoteDemoteR, 
                    bool bPromoteDemoteC, 
                    bool bPromoteDemoteE, 
                    bool bPromoteDemoteD) {
            return base.Channel.SaveRoleBaseAccessUserAsync(IGroupID, usernameI, ITenantID, bBotDashboardR, bBotDashboardC, bBotDashboardE, bBotDashboardD, bqueueR, bqueueC, bqueueE, bqueueD, bAddScheduleR, bAddScheduleC, bAddScheduleE, bAddScheduleD, bAddUserR, bAddUserC, bAddUserE, bAddUserD, bAddRobotR, bAddRobotC, bAddRobotE, bAddRobotD, bQueueManagementR, bQueueManagementC, bQueueManagementE, bQueueManagementD, bAssignQueueBotR, bAssignQueueBotC, bAssignQueueBotE, bAssignQueueBotD, bAssignBotUserR, bAssignBotUserC, bAssignBotUserE, bAssignBotUserD, bBotLogR, bBotLogC, bBotLogE, bBotLogD, bAuditTrailR, bAuditTrailC, bAuditTrailE, bAuditTrailD, bScheduleDetailsR, bScheduleDetailsC, bScheduleDetailsE, bScheduleDetailsD, bConfigurationR, bConfigurationC, bConfigurationE, bConfigurationD, bProcessManagementR, bProcessManagementC, bProcessManagementE, bProcessManagementD, bDetailLogR, bDetailLogC, bDetailLogE, bDetailLogD, bPromoteDemoteR, bPromoteDemoteC, bPromoteDemoteE, bPromoteDemoteD);
        }
        
        public bool AutomationRequest(Logger.ServiceReference1.RequestInput _requestInput) {
            return base.Channel.AutomationRequest(_requestInput);
        }
        
        public System.Threading.Tasks.Task<bool> AutomationRequestAsync(Logger.ServiceReference1.RequestInput _requestInput) {
            return base.Channel.AutomationRequestAsync(_requestInput);
        }
        
        public bool AutomationRequestPriority(string iQueueName, string strRoutingKey, System.Collections.Generic.Dictionary<string, object> iMessage1, int iMsgPriority, string iGroupName, string iTenantName) {
            return base.Channel.AutomationRequestPriority(iQueueName, strRoutingKey, iMessage1, iMsgPriority, iGroupName, iTenantName);
        }
        
        public System.Threading.Tasks.Task<bool> AutomationRequestPriorityAsync(string iQueueName, string strRoutingKey, System.Collections.Generic.Dictionary<string, object> iMessage1, int iMsgPriority, string iGroupName, string iTenantName) {
            return base.Channel.AutomationRequestPriorityAsync(iQueueName, strRoutingKey, iMessage1, iMsgPriority, iGroupName, iTenantName);
        }
        
        public int AddUser(string domainname, string userid, string pwd, int groupid, string groupname, int tenantid, string strUserRole, string createdby) {
            return base.Channel.AddUser(domainname, userid, pwd, groupid, groupname, tenantid, strUserRole, createdby);
        }
        
        public System.Threading.Tasks.Task<int> AddUserAsync(string domainname, string userid, string pwd, int groupid, string groupname, int tenantid, string strUserRole, string createdby) {
            return base.Channel.AddUserAsync(domainname, userid, pwd, groupid, groupname, tenantid, strUserRole, createdby);
        }
        
        public int AddTenant(string TenantName, string owner, int groupid, int iTenantId, string createdBy) {
            return base.Channel.AddTenant(TenantName, owner, groupid, iTenantId, createdBy);
        }
        
        public System.Threading.Tasks.Task<int> AddTenantAsync(string TenantName, string owner, int groupid, int iTenantId, string createdBy) {
            return base.Channel.AddTenantAsync(TenantName, owner, groupid, iTenantId, createdBy);
        }
        
        public int DeleteTenant(int groupid, int TenantId, string CurrentUser) {
            return base.Channel.DeleteTenant(groupid, TenantId, CurrentUser);
        }
        
        public System.Threading.Tasks.Task<int> DeleteTenantAsync(int groupid, int TenantId, string CurrentUser) {
            return base.Channel.DeleteTenantAsync(groupid, TenantId, CurrentUser);
        }
        
        public int GetTenantId(int groupid, int tenantid, string TenantName) {
            return base.Channel.GetTenantId(groupid, tenantid, TenantName);
        }
        
        public System.Threading.Tasks.Task<int> GetTenantIdAsync(int groupid, int tenantid, string TenantName) {
            return base.Channel.GetTenantIdAsync(groupid, tenantid, TenantName);
        }
        
        public int GetGroupId(string groupName, int tenantid) {
            return base.Channel.GetGroupId(groupName, tenantid);
        }
        
        public System.Threading.Tasks.Task<int> GetGroupIdAsync(string groupName, int tenantid) {
            return base.Channel.GetGroupIdAsync(groupName, tenantid);
        }
        
        public int AddGroup(string groupName, int groupid, int tenantid, string createdby) {
            return base.Channel.AddGroup(groupName, groupid, tenantid, createdby);
        }
        
        public System.Threading.Tasks.Task<int> AddGroupAsync(string groupName, int groupid, int tenantid, string createdby) {
            return base.Channel.AddGroupAsync(groupName, groupid, tenantid, createdby);
        }
        
        public int DeleteGroup(int id, int groupId, int tenantId, string groupName, string currentUser) {
            return base.Channel.DeleteGroup(id, groupId, tenantId, groupName, currentUser);
        }
        
        public System.Threading.Tasks.Task<int> DeleteGroupAsync(int id, int groupId, int tenantId, string groupName, string currentUser) {
            return base.Channel.DeleteGroupAsync(id, groupId, tenantId, groupName, currentUser);
        }
        
        public int UpdateDefaultVersion(int iTenantId, int groupid, string ProcessId, string updatedVersion, bool isLatest) {
            return base.Channel.UpdateDefaultVersion(iTenantId, groupid, ProcessId, updatedVersion, isLatest);
        }
        
        public System.Threading.Tasks.Task<int> UpdateDefaultVersionAsync(int iTenantId, int groupid, string ProcessId, string updatedVersion, bool isLatest) {
            return base.Channel.UpdateDefaultVersionAsync(iTenantId, groupid, ProcessId, updatedVersion, isLatest);
        }
        
        public int AddProcess(string ProcessName, int EnvironmentName, int groupid, int tenantid, string ProcessVersion, bool latestVersion, string createdBy) {
            return base.Channel.AddProcess(ProcessName, EnvironmentName, groupid, tenantid, ProcessVersion, latestVersion, createdBy);
        }
        
        public System.Threading.Tasks.Task<int> AddProcessAsync(string ProcessName, int EnvironmentName, int groupid, int tenantid, string ProcessVersion, bool latestVersion, string createdBy) {
            return base.Channel.AddProcessAsync(ProcessName, EnvironmentName, groupid, tenantid, ProcessVersion, latestVersion, createdBy);
        }
        
        public int AddProcessWithZip(string ProcessName, int groupid, int TenantId, string ProcessVersion, bool LatestVersion, string createdBy, byte[] ZipDataFile) {
            return base.Channel.AddProcessWithZip(ProcessName, groupid, TenantId, ProcessVersion, LatestVersion, createdBy, ZipDataFile);
        }
        
        public System.Threading.Tasks.Task<int> AddProcessWithZipAsync(string ProcessName, int groupid, int TenantId, string ProcessVersion, bool LatestVersion, string createdBy, byte[] ZipDataFile) {
            return base.Channel.AddProcessWithZipAsync(ProcessName, groupid, TenantId, ProcessVersion, LatestVersion, createdBy, ZipDataFile);
        }
        
        public int AddBot(string strBotName, string strBotId, string pwd, string botkey, string strMachineName, int groupid, int tenantid, string createdby) {
            return base.Channel.AddBot(strBotName, strBotId, pwd, botkey, strMachineName, groupid, tenantid, createdby);
        }
        
        public System.Threading.Tasks.Task<int> AddBotAsync(string strBotName, string strBotId, string pwd, string botkey, string strMachineName, int groupid, int tenantid, string createdby) {
            return base.Channel.AddBotAsync(strBotName, strBotId, pwd, botkey, strMachineName, groupid, tenantid, createdby);
        }
        
        public int AddConfigParameters(string strParameterName, string strParameterValue, int iAccessLevelProcessId, int groupid, int tenantid, string createdby) {
            return base.Channel.AddConfigParameters(strParameterName, strParameterValue, iAccessLevelProcessId, groupid, tenantid, createdby);
        }
        
        public System.Threading.Tasks.Task<int> AddConfigParametersAsync(string strParameterName, string strParameterValue, int iAccessLevelProcessId, int groupid, int tenantid, string createdby) {
            return base.Channel.AddConfigParametersAsync(strParameterName, strParameterValue, iAccessLevelProcessId, groupid, tenantid, createdby);
        }
        
        public int DeleteConfigParameters(int iParameterId, int groupid, int tenantid, string strCurrentUser) {
            return base.Channel.DeleteConfigParameters(iParameterId, groupid, tenantid, strCurrentUser);
        }
        
        public System.Threading.Tasks.Task<int> DeleteConfigParametersAsync(int iParameterId, int groupid, int tenantid, string strCurrentUser) {
            return base.Channel.DeleteConfigParametersAsync(iParameterId, groupid, tenantid, strCurrentUser);
        }
        
        public int DeleteUser(string strId, int groupid, int tenantid, string createdby) {
            return base.Channel.DeleteUser(strId, groupid, tenantid, createdby);
        }
        
        public System.Threading.Tasks.Task<int> DeleteUserAsync(string strId, int groupid, int tenantid, string createdby) {
            return base.Channel.DeleteUserAsync(strId, groupid, tenantid, createdby);
        }
        
        public int DeleteProcess(string strId, int groupid, int tenantid, string createdby) {
            return base.Channel.DeleteProcess(strId, groupid, tenantid, createdby);
        }
        
        public System.Threading.Tasks.Task<int> DeleteProcessAsync(string strId, int groupid, int tenantid, string createdby) {
            return base.Channel.DeleteProcessAsync(strId, groupid, tenantid, createdby);
        }
        
        public int DeleteProcessVersion(string strProcessId, string strProcessName, string strProcessVersion, int groupid, int tenantid, string createdby) {
            return base.Channel.DeleteProcessVersion(strProcessId, strProcessName, strProcessVersion, groupid, tenantid, createdby);
        }
        
        public System.Threading.Tasks.Task<int> DeleteProcessVersionAsync(string strProcessId, string strProcessName, string strProcessVersion, int groupid, int tenantid, string createdby) {
            return base.Channel.DeleteProcessVersionAsync(strProcessId, strProcessName, strProcessVersion, groupid, tenantid, createdby);
        }
        
        public int DeleteQueueToBotMapping(string strBotId, int groupid, int tenantid, string createdby) {
            return base.Channel.DeleteQueueToBotMapping(strBotId, groupid, tenantid, createdby);
        }
        
        public System.Threading.Tasks.Task<int> DeleteQueueToBotMappingAsync(string strBotId, int groupid, int tenantid, string createdby) {
            return base.Channel.DeleteQueueToBotMappingAsync(strBotId, groupid, tenantid, createdby);
        }
        
        public int DeleteUserToBotMapping(string strId, int groupid, int tenantid, string createdby) {
            return base.Channel.DeleteUserToBotMapping(strId, groupid, tenantid, createdby);
        }
        
        public System.Threading.Tasks.Task<int> DeleteUserToBotMappingAsync(string strId, int groupid, int tenantid, string createdby) {
            return base.Channel.DeleteUserToBotMappingAsync(strId, groupid, tenantid, createdby);
        }
        
        public int UpdateCustomRoleBasedAccess(
                    bool QDetailsDevVal, 
                    bool QDetailsProdVal, 
                    bool QDetailsTestVal, 
                    bool AddSchedDevVal, 
                    bool AddSchedProdVal, 
                    bool AddSchedTestVal, 
                    bool AddUserDevVal, 
                    bool AddUserProdVal, 
                    bool AddUserTestVal, 
                    bool AddRobotDevVal, 
                    bool AddRobotProdVal, 
                    bool AddRobotTestVal, 
                    bool AddQDevVal, 
                    bool AddQProdVal, 
                    bool AddQTestVal, 
                    bool AddGroupDevVal, 
                    bool AddGroupProdVal, 
                    bool AddGroupTestVal, 
                    bool AddQueToBotDevVal, 
                    bool AddQueToBotProdVal, 
                    bool AddQueToBotTestVal, 
                    bool AddBotToUserDevVal, 
                    bool AddBotToUserProdVal, 
                    bool AddBotToUserTestVal, 
                    bool BotLogDevVal, 
                    bool BotLogProdVal, 
                    bool BotLogTestVal, 
                    bool AuditTrailDevVal, 
                    bool AuditTrailProdVal, 
                    bool AuditTrailTestVal, 
                    int groupid, 
                    int tenantid) {
            return base.Channel.UpdateCustomRoleBasedAccess(QDetailsDevVal, QDetailsProdVal, QDetailsTestVal, AddSchedDevVal, AddSchedProdVal, AddSchedTestVal, AddUserDevVal, AddUserProdVal, AddUserTestVal, AddRobotDevVal, AddRobotProdVal, AddRobotTestVal, AddQDevVal, AddQProdVal, AddQTestVal, AddGroupDevVal, AddGroupProdVal, AddGroupTestVal, AddQueToBotDevVal, AddQueToBotProdVal, AddQueToBotTestVal, AddBotToUserDevVal, AddBotToUserProdVal, AddBotToUserTestVal, BotLogDevVal, BotLogProdVal, BotLogTestVal, AuditTrailDevVal, AuditTrailProdVal, AuditTrailTestVal, groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<int> UpdateCustomRoleBasedAccessAsync(
                    bool QDetailsDevVal, 
                    bool QDetailsProdVal, 
                    bool QDetailsTestVal, 
                    bool AddSchedDevVal, 
                    bool AddSchedProdVal, 
                    bool AddSchedTestVal, 
                    bool AddUserDevVal, 
                    bool AddUserProdVal, 
                    bool AddUserTestVal, 
                    bool AddRobotDevVal, 
                    bool AddRobotProdVal, 
                    bool AddRobotTestVal, 
                    bool AddQDevVal, 
                    bool AddQProdVal, 
                    bool AddQTestVal, 
                    bool AddGroupDevVal, 
                    bool AddGroupProdVal, 
                    bool AddGroupTestVal, 
                    bool AddQueToBotDevVal, 
                    bool AddQueToBotProdVal, 
                    bool AddQueToBotTestVal, 
                    bool AddBotToUserDevVal, 
                    bool AddBotToUserProdVal, 
                    bool AddBotToUserTestVal, 
                    bool BotLogDevVal, 
                    bool BotLogProdVal, 
                    bool BotLogTestVal, 
                    bool AuditTrailDevVal, 
                    bool AuditTrailProdVal, 
                    bool AuditTrailTestVal, 
                    int groupid, 
                    int tenantid) {
            return base.Channel.UpdateCustomRoleBasedAccessAsync(QDetailsDevVal, QDetailsProdVal, QDetailsTestVal, AddSchedDevVal, AddSchedProdVal, AddSchedTestVal, AddUserDevVal, AddUserProdVal, AddUserTestVal, AddRobotDevVal, AddRobotProdVal, AddRobotTestVal, AddQDevVal, AddQProdVal, AddQTestVal, AddGroupDevVal, AddGroupProdVal, AddGroupTestVal, AddQueToBotDevVal, AddQueToBotProdVal, AddQueToBotTestVal, AddBotToUserDevVal, AddBotToUserProdVal, AddBotToUserTestVal, BotLogDevVal, BotLogProdVal, BotLogTestVal, AuditTrailDevVal, AuditTrailProdVal, AuditTrailTestVal, groupid, tenantid);
        }
        
        public System.Data.DataTable GetCustomRoleBasedAccess(int groupid, int iTenantId) {
            return base.Channel.GetCustomRoleBasedAccess(groupid, iTenantId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetCustomRoleBasedAccessAsync(int groupid, int iTenantId) {
            return base.Channel.GetCustomRoleBasedAccessAsync(groupid, iTenantId);
        }
        
        public System.Data.DataTable LoginUser(string domainname, string userid, string pwd, string tenantName, string groupName) {
            return base.Channel.LoginUser(domainname, userid, pwd, tenantName, groupName);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> LoginUserAsync(string domainname, string userid, string pwd, string tenantName, string groupName) {
            return base.Channel.LoginUserAsync(domainname, userid, pwd, tenantName, groupName);
        }
        
        public int AssignBotToUser(string strBotId, string strUserId, string createdby, int groupid, int tenantid) {
            return base.Channel.AssignBotToUser(strBotId, strUserId, createdby, groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<int> AssignBotToUserAsync(string strBotId, string strUserId, string createdby, int groupid, int tenantid) {
            return base.Channel.AssignBotToUserAsync(strBotId, strUserId, createdby, groupid, tenantid);
        }
        
        public int AssignQueueToBot(string strBotId, string queuename, string createdby, int groupid, int tenantid) {
            return base.Channel.AssignQueueToBot(strBotId, queuename, createdby, groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<int> AssignQueueToBotAsync(string strBotId, string queuename, string createdby, int groupid, int tenantid) {
            return base.Channel.AssignQueueToBotAsync(strBotId, queuename, createdby, groupid, tenantid);
        }
        
        public System.Data.DataTable GetBots(int groupid, int tenantid) {
            return base.Channel.GetBots(groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetBotsAsync(int groupid, int tenantid) {
            return base.Channel.GetBotsAsync(groupid, tenantid);
        }
        
        public System.Data.DataTable GetGroups(int groupid, int tenantid) {
            return base.Channel.GetGroups(groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetGroupsAsync(int groupid, int tenantid) {
            return base.Channel.GetGroupsAsync(groupid, tenantid);
        }
        
        public System.Data.DataTable GetConfigParameters(int groupid, int tenantid) {
            return base.Channel.GetConfigParameters(groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetConfigParametersAsync(int groupid, int tenantid) {
            return base.Channel.GetConfigParametersAsync(groupid, tenantid);
        }
        
        public System.Data.DataTable GetQueues(int groupid, int tenantid) {
            return base.Channel.GetQueues(groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetQueuesAsync(int groupid, int tenantid) {
            return base.Channel.GetQueuesAsync(groupid, tenantid);
        }
        
        public System.Data.DataTable GetDashboardBots(int groupid, int tenantid, string userid) {
            return base.Channel.GetDashboardBots(groupid, tenantid, userid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetDashboardBotsAsync(int groupid, int tenantid, string userid) {
            return base.Channel.GetDashboardBotsAsync(groupid, tenantid, userid);
        }
        
        public System.Data.DataTable GetQueueToBotMapping(int groupid, int tenantid) {
            return base.Channel.GetQueueToBotMapping(groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetQueueToBotMappingAsync(int groupid, int tenantid) {
            return base.Channel.GetQueueToBotMappingAsync(groupid, tenantid);
        }
        
        public System.Data.DataTable GetUserToBotMapping(string userid, int groupid, int TenantId) {
            return base.Channel.GetUserToBotMapping(userid, groupid, TenantId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetUserToBotMappingAsync(string userid, int groupid, int TenantId) {
            return base.Channel.GetUserToBotMappingAsync(userid, groupid, TenantId);
        }
        
        public System.Data.DataTable GetBotStartDetails(string botname, string MachineName, int groupid, int tenantid) {
            return base.Channel.GetBotStartDetails(botname, MachineName, groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetBotStartDetailsAsync(string botname, string MachineName, int groupid, int tenantid) {
            return base.Channel.GetBotStartDetailsAsync(botname, MachineName, groupid, tenantid);
        }
        
        public System.Data.DataTable GetBotStartDetailsFromDesktop(string userid, string machinename) {
            return base.Channel.GetBotStartDetailsFromDesktop(userid, machinename);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetBotStartDetailsFromDesktopAsync(string userid, string machinename) {
            return base.Channel.GetBotStartDetailsFromDesktopAsync(userid, machinename);
        }
        
        public System.Data.DataTable GetStompDetails(string botid, int groupid, int tenantid) {
            return base.Channel.GetStompDetails(botid, groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetStompDetailsAsync(string botid, int groupid, int tenantid) {
            return base.Channel.GetStompDetailsAsync(botid, groupid, tenantid);
        }
        
        public System.Data.DataTable GetRQDetails(string botid) {
            return base.Channel.GetRQDetails(botid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetRQDetailsAsync(string botid) {
            return base.Channel.GetRQDetailsAsync(botid);
        }
        
        public System.Data.DataTable GetLogsForDashboardBots(string strbotid, string strmachinename, string StartTime, string EndTime, int groupid, int tenantid) {
            return base.Channel.GetLogsForDashboardBots(strbotid, strmachinename, StartTime, EndTime, groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetLogsForDashboardBotsAsync(string strbotid, string strmachinename, string StartTime, string EndTime, int groupid, int tenantid) {
            return base.Channel.GetLogsForDashboardBotsAsync(strbotid, strmachinename, StartTime, EndTime, groupid, tenantid);
        }
        
        public System.Data.DataTable GetUsers(int groupid, int tenantid) {
            return base.Channel.GetUsers(groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetUsersAsync(int groupid, int tenantid) {
            return base.Channel.GetUsersAsync(groupid, tenantid);
        }
        
        public System.Data.DataTable GetAllTenants(int groupid, int tenantid) {
            return base.Channel.GetAllTenants(groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetAllTenantsAsync(int groupid, int tenantid) {
            return base.Channel.GetAllTenantsAsync(groupid, tenantid);
        }
        
        public int InsertIntoLogger(string MachineName, string UserName, string RobotName, string ProcessName, System.DateTime dateUtc, string Logger, string Message, int groupid, int tenantid) {
            return base.Channel.InsertIntoLogger(MachineName, UserName, RobotName, ProcessName, dateUtc, Logger, Message, groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<int> InsertIntoLoggerAsync(string MachineName, string UserName, string RobotName, string ProcessName, System.DateTime dateUtc, string Logger, string Message, int groupid, int tenantid) {
            return base.Channel.InsertIntoLoggerAsync(MachineName, UserName, RobotName, ProcessName, dateUtc, Logger, Message, groupid, tenantid);
        }
        
        public System.Data.DataTable GetLog(string userid, int groupid, int tenantid) {
            return base.Channel.GetLog(userid, groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetLogAsync(string userid, int groupid, int tenantid) {
            return base.Channel.GetLogAsync(userid, groupid, tenantid);
        }
        
        public System.Data.DataTable GetAuditTrail(int groupid, int tenantid, string userid) {
            return base.Channel.GetAuditTrail(groupid, tenantid, userid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetAuditTrailAsync(int groupid, int tenantid, string userid) {
            return base.Channel.GetAuditTrailAsync(groupid, tenantid, userid);
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public Logger.ServiceReference1.CompositeType GetDataUsingDataContract(Logger.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<Logger.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(Logger.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public void LogDataToDB(System.Data.DataTable LogData) {
            base.Channel.LogDataToDB(LogData);
        }
        
        public System.Threading.Tasks.Task LogDataToDBAsync(System.Data.DataTable LogData) {
            return base.Channel.LogDataToDBAsync(LogData);
        }
        
        public System.Data.DataTable GetProcessDetails(string ProcessName, string groupname, string tenantname) {
            return base.Channel.GetProcessDetails(ProcessName, groupname, tenantname);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetProcessDetailsAsync(string ProcessName, string groupname, string tenantname) {
            return base.Channel.GetProcessDetailsAsync(ProcessName, groupname, tenantname);
        }
        
        public System.Data.DataTable DownloadAutomationZipBinary(string ProcessName, string ProcessVersion, string AutomationGroupName, string TenantName) {
            return base.Channel.DownloadAutomationZipBinary(ProcessName, ProcessVersion, AutomationGroupName, TenantName);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> DownloadAutomationZipBinaryAsync(string ProcessName, string ProcessVersion, string AutomationGroupName, string TenantName) {
            return base.Channel.DownloadAutomationZipBinaryAsync(ProcessName, ProcessVersion, AutomationGroupName, TenantName);
        }
        
        public System.Data.DataTable GetProcessDataWitoutZipFile(int groupid, int tenantid) {
            return base.Channel.GetProcessDataWitoutZipFile(groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetProcessDataWitoutZipFileAsync(int groupid, int tenantid) {
            return base.Channel.GetProcessDataWitoutZipFileAsync(groupid, tenantid);
        }
        
        public System.Data.DataTable LoadProcessVersion(int groupid, int tenantid, string ProcessId) {
            return base.Channel.LoadProcessVersion(groupid, tenantid, ProcessId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> LoadProcessVersionAsync(int groupid, int tenantid, string ProcessId) {
            return base.Channel.LoadProcessVersionAsync(groupid, tenantid, ProcessId);
        }
        
        public int DeleteGroupWithAllRelatedData(int groupid, int tenantid, string createdby) {
            return base.Channel.DeleteGroupWithAllRelatedData(groupid, tenantid, createdby);
        }
        
        public System.Threading.Tasks.Task<int> DeleteGroupWithAllRelatedDataAsync(int groupid, int tenantid, string createdby) {
            return base.Channel.DeleteGroupWithAllRelatedDataAsync(groupid, tenantid, createdby);
        }
        
        public int UpdateIsactiveStatusGroupRelatedTables(int groupid, int isactive) {
            return base.Channel.UpdateIsactiveStatusGroupRelatedTables(groupid, isactive);
        }
        
        public System.Threading.Tasks.Task<int> UpdateIsactiveStatusGroupRelatedTablesAsync(int groupid, int isactive) {
            return base.Channel.UpdateIsactiveStatusGroupRelatedTablesAsync(groupid, isactive);
        }
        
        public int CheckIsactiveStatusGroup(int groupid) {
            return base.Channel.CheckIsactiveStatusGroup(groupid);
        }
        
        public System.Threading.Tasks.Task<int> CheckIsactiveStatusGroupAsync(int groupid) {
            return base.Channel.CheckIsactiveStatusGroupAsync(groupid);
        }
        
        public System.Data.DataTable GetCountToDeleteGroup(int groupid) {
            return base.Channel.GetCountToDeleteGroup(groupid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetCountToDeleteGroupAsync(int groupid) {
            return base.Channel.GetCountToDeleteGroupAsync(groupid);
        }
        
        public int DeleteQueue(string queueName, int tenantid, int groupid) {
            return base.Channel.DeleteQueue(queueName, tenantid, groupid);
        }
        
        public System.Threading.Tasks.Task<int> DeleteQueueAsync(string queueName, int tenantid, int groupid) {
            return base.Channel.DeleteQueueAsync(queueName, tenantid, groupid);
        }
        
        public int PurgeQueue(string queueName, int tenantid) {
            return base.Channel.PurgeQueue(queueName, tenantid);
        }
        
        public System.Threading.Tasks.Task<int> PurgeQueueAsync(string queueName, int tenantid) {
            return base.Channel.PurgeQueueAsync(queueName, tenantid);
        }
        
        public int AddQueue(string queueName, string exchangeName, int tenantid, int groupid) {
            return base.Channel.AddQueue(queueName, exchangeName, tenantid, groupid);
        }
        
        public System.Threading.Tasks.Task<int> AddQueueAsync(string queueName, string exchangeName, int tenantid, int groupid) {
            return base.Channel.AddQueueAsync(queueName, exchangeName, tenantid, groupid);
        }
        
        public System.Data.DataTable getQueueNames(int tenantid, int groupid) {
            return base.Channel.getQueueNames(tenantid, groupid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> getQueueNamesAsync(int tenantid, int groupid) {
            return base.Channel.getQueueNamesAsync(tenantid, groupid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Logger.ServiceReference1.GetCredentialsResponse Logger.ServiceReference1.IBOTService.GetCredentials1(Logger.ServiceReference1.GetCredentialsRequest request) {
            return base.Channel.GetCredentials1(request);
        }
        
        public System.Data.DataTable GetCredentials1(string credentialName, int TenantId, int groupid) {
            Logger.ServiceReference1.GetCredentialsRequest inValue = new Logger.ServiceReference1.GetCredentialsRequest();
            inValue.credentialName = credentialName;
            inValue.TenantId = TenantId;
            inValue.groupid = groupid;
            Logger.ServiceReference1.GetCredentialsResponse retVal = ((Logger.ServiceReference1.IBOTService)(this)).GetCredentials1(inValue);
            return retVal.GetCredentialsResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Logger.ServiceReference1.GetCredentialsResponse> Logger.ServiceReference1.IBOTService.GetCredentials1Async(Logger.ServiceReference1.GetCredentialsRequest request) {
            return base.Channel.GetCredentials1Async(request);
        }
        
        public System.Threading.Tasks.Task<Logger.ServiceReference1.GetCredentialsResponse> GetCredentials1Async(string credentialName, int TenantId, int groupid) {
            Logger.ServiceReference1.GetCredentialsRequest inValue = new Logger.ServiceReference1.GetCredentialsRequest();
            inValue.credentialName = credentialName;
            inValue.TenantId = TenantId;
            inValue.groupid = groupid;
            return ((Logger.ServiceReference1.IBOTService)(this)).GetCredentials1Async(inValue);
        }
        
        public System.Data.DataTable GetProcessQMapping(int groupid, int tenantid) {
            return base.Channel.GetProcessQMapping(groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetProcessQMappingAsync(int groupid, int tenantid) {
            return base.Channel.GetProcessQMappingAsync(groupid, tenantid);
        }
        
        public int AddProcessQueueMapping(string processName, string groupName, string tenantName) {
            return base.Channel.AddProcessQueueMapping(processName, groupName, tenantName);
        }
        
        public System.Threading.Tasks.Task<int> AddProcessQueueMappingAsync(string processName, string groupName, string tenantName) {
            return base.Channel.AddProcessQueueMappingAsync(processName, groupName, tenantName);
        }
        
        public int deleteprocessQMapping(string processname, int GroupId, int TenanatId) {
            return base.Channel.deleteprocessQMapping(processname, GroupId, TenanatId);
        }
        
        public System.Threading.Tasks.Task<int> deleteprocessQMappingAsync(string processname, int GroupId, int TenanatId) {
            return base.Channel.deleteprocessQMappingAsync(processname, GroupId, TenanatId);
        }
    }
}
