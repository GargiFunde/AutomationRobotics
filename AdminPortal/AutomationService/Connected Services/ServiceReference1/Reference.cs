//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AutomationService.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/AutomationService")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IBOTService")]
    public interface IBOTService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddSchedule", ReplyAction="http://tempuri.org/IBOTService/AddScheduleResponse")]
        int AddSchedule(string strQueueName, string strBotName, string strChronExp, string stopAfter, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddSchedule", ReplyAction="http://tempuri.org/IBOTService/AddScheduleResponse")]
        System.Threading.Tasks.Task<int> AddScheduleAsync(string strQueueName, string strBotName, string strChronExp, string stopAfter, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddQueueDetails", ReplyAction="http://tempuri.org/IBOTService/AddQueueDetailsResponse")]
        int AddQueueDetails(string queueName, int groupid, int iTenantID, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddQueueDetails", ReplyAction="http://tempuri.org/IBOTService/AddQueueDetailsResponse")]
        System.Threading.Tasks.Task<int> AddQueueDetailsAsync(string queueName, int groupid, int iTenantID, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteSchedule", ReplyAction="http://tempuri.org/IBOTService/DeleteScheduleResponse")]
        int DeleteSchedule(string strId, string strQueueName, string strBotName, string strChronExp, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteSchedule", ReplyAction="http://tempuri.org/IBOTService/DeleteScheduleResponse")]
        System.Threading.Tasks.Task<int> DeleteScheduleAsync(string strId, string strQueueName, string strBotName, string strChronExp, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetSchedules", ReplyAction="http://tempuri.org/IBOTService/GetSchedulesResponse")]
        System.Data.DataTable GetSchedules(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetSchedules", ReplyAction="http://tempuri.org/IBOTService/GetSchedulesResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetSchedulesAsync(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AutomationRequest", ReplyAction="http://tempuri.org/IBOTService/AutomationRequestResponse")]
        bool AutomationRequest(CommonLibrary.RequestInput _requestInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AutomationRequest", ReplyAction="http://tempuri.org/IBOTService/AutomationRequestResponse")]
        System.Threading.Tasks.Task<bool> AutomationRequestAsync(CommonLibrary.RequestInput _requestInput);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddUser", ReplyAction="http://tempuri.org/IBOTService/AddUserResponse")]
        int AddUser(string domainname, string userid, string pwd, int groupid, int tenantid, string strUserRole, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddUser", ReplyAction="http://tempuri.org/IBOTService/AddUserResponse")]
        System.Threading.Tasks.Task<int> AddUserAsync(string domainname, string userid, string pwd, int groupid, int tenantid, string strUserRole, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddTenant", ReplyAction="http://tempuri.org/IBOTService/AddTenantResponse")]
        int AddTenant(string TenantName, string owner, int groupid, int iTenantId, string createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddTenant", ReplyAction="http://tempuri.org/IBOTService/AddTenantResponse")]
        System.Threading.Tasks.Task<int> AddTenantAsync(string TenantName, string owner, int groupid, int iTenantId, string createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteTenant", ReplyAction="http://tempuri.org/IBOTService/DeleteTenantResponse")]
        int DeleteTenant(int groupid, int TenantId, string CurrentUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteTenant", ReplyAction="http://tempuri.org/IBOTService/DeleteTenantResponse")]
        System.Threading.Tasks.Task<int> DeleteTenantAsync(int groupid, int TenantId, string CurrentUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetTenantId", ReplyAction="http://tempuri.org/IBOTService/GetTenantIdResponse")]
        int GetTenantId(int groupid, int tenantid, string TenantName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetTenantId", ReplyAction="http://tempuri.org/IBOTService/GetTenantIdResponse")]
        System.Threading.Tasks.Task<int> GetTenantIdAsync(int groupid, int tenantid, string TenantName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddGroup", ReplyAction="http://tempuri.org/IBOTService/AddGroupResponse")]
        int AddGroup(string groupName, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddGroup", ReplyAction="http://tempuri.org/IBOTService/AddGroupResponse")]
        System.Threading.Tasks.Task<int> AddGroupAsync(string groupName, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteGroup", ReplyAction="http://tempuri.org/IBOTService/DeleteGroupResponse")]
        int DeleteGroup(string strId, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteGroup", ReplyAction="http://tempuri.org/IBOTService/DeleteGroupResponse")]
        System.Threading.Tasks.Task<int> DeleteGroupAsync(string strId, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/UpdateDefaultVersion", ReplyAction="http://tempuri.org/IBOTService/UpdateDefaultVersionResponse")]
        int UpdateDefaultVersion(int iTenantId, int groupid, string ProcessId, string updatedVersion, bool isLatest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/UpdateDefaultVersion", ReplyAction="http://tempuri.org/IBOTService/UpdateDefaultVersionResponse")]
        System.Threading.Tasks.Task<int> UpdateDefaultVersionAsync(int iTenantId, int groupid, string ProcessId, string updatedVersion, bool isLatest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddProcess", ReplyAction="http://tempuri.org/IBOTService/AddProcessResponse")]
        int AddProcess(string ProcessName, int EnvironmentName, int groupid, int tenantid, string ProcessVersion, bool latestVersion, string createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddProcess", ReplyAction="http://tempuri.org/IBOTService/AddProcessResponse")]
        System.Threading.Tasks.Task<int> AddProcessAsync(string ProcessName, int EnvironmentName, int groupid, int tenantid, string ProcessVersion, bool latestVersion, string createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddProcessWithZip", ReplyAction="http://tempuri.org/IBOTService/AddProcessWithZipResponse")]
        int AddProcessWithZip(string ProcessName, int groupid, int TenantId, string ProcessVersion, bool LatestVersion, string createdBy, byte[] ZipDataFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddProcessWithZip", ReplyAction="http://tempuri.org/IBOTService/AddProcessWithZipResponse")]
        System.Threading.Tasks.Task<int> AddProcessWithZipAsync(string ProcessName, int groupid, int TenantId, string ProcessVersion, bool LatestVersion, string createdBy, byte[] ZipDataFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddBot", ReplyAction="http://tempuri.org/IBOTService/AddBotResponse")]
        int AddBot(string strBotName, string strBotId, string pwd, string botkey, string strMachineName, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddBot", ReplyAction="http://tempuri.org/IBOTService/AddBotResponse")]
        System.Threading.Tasks.Task<int> AddBotAsync(string strBotName, string strBotId, string pwd, string botkey, string strMachineName, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddConfigParameters", ReplyAction="http://tempuri.org/IBOTService/AddConfigParametersResponse")]
        int AddConfigParameters(string strParameterName, string strParameterValue, int iAccessLevelProcessId, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AddConfigParameters", ReplyAction="http://tempuri.org/IBOTService/AddConfigParametersResponse")]
        System.Threading.Tasks.Task<int> AddConfigParametersAsync(string strParameterName, string strParameterValue, int iAccessLevelProcessId, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteConfigParameters", ReplyAction="http://tempuri.org/IBOTService/DeleteConfigParametersResponse")]
        int DeleteConfigParameters(int iParameterId, int groupid, int tenantid, string strCurrentUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteConfigParameters", ReplyAction="http://tempuri.org/IBOTService/DeleteConfigParametersResponse")]
        System.Threading.Tasks.Task<int> DeleteConfigParametersAsync(int iParameterId, int groupid, int tenantid, string strCurrentUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteBot", ReplyAction="http://tempuri.org/IBOTService/DeleteBotResponse")]
        int DeleteBot(string strId, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteBot", ReplyAction="http://tempuri.org/IBOTService/DeleteBotResponse")]
        System.Threading.Tasks.Task<int> DeleteBotAsync(string strId, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteUser", ReplyAction="http://tempuri.org/IBOTService/DeleteUserResponse")]
        int DeleteUser(string strId, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteUser", ReplyAction="http://tempuri.org/IBOTService/DeleteUserResponse")]
        System.Threading.Tasks.Task<int> DeleteUserAsync(string strId, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteProcess", ReplyAction="http://tempuri.org/IBOTService/DeleteProcessResponse")]
        int DeleteProcess(string strId, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteProcess", ReplyAction="http://tempuri.org/IBOTService/DeleteProcessResponse")]
        System.Threading.Tasks.Task<int> DeleteProcessAsync(string strId, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteProcessVersion", ReplyAction="http://tempuri.org/IBOTService/DeleteProcessVersionResponse")]
        int DeleteProcessVersion(string strProcessId, string strProcessName, string strProcessVersion, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteProcessVersion", ReplyAction="http://tempuri.org/IBOTService/DeleteProcessVersionResponse")]
        System.Threading.Tasks.Task<int> DeleteProcessVersionAsync(string strProcessId, string strProcessName, string strProcessVersion, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteQueueToBotMapping", ReplyAction="http://tempuri.org/IBOTService/DeleteQueueToBotMappingResponse")]
        int DeleteQueueToBotMapping(string strBotId, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteQueueToBotMapping", ReplyAction="http://tempuri.org/IBOTService/DeleteQueueToBotMappingResponse")]
        System.Threading.Tasks.Task<int> DeleteQueueToBotMappingAsync(string strBotId, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteUserToBotMapping", ReplyAction="http://tempuri.org/IBOTService/DeleteUserToBotMappingResponse")]
        int DeleteUserToBotMapping(string strId, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DeleteUserToBotMapping", ReplyAction="http://tempuri.org/IBOTService/DeleteUserToBotMappingResponse")]
        System.Threading.Tasks.Task<int> DeleteUserToBotMappingAsync(string strId, int groupid, int tenantid, string createdby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/UpdateCustomRoleBasedAccess", ReplyAction="http://tempuri.org/IBOTService/UpdateCustomRoleBasedAccessResponse")]
        int UpdateCustomRoleBasedAccess(
                    bool QDetailsDevVal, 
                    bool QDetailsProdVal, 
                    bool QDetailsTestVal, 
                    bool AddSchedDevVal, 
                    bool AddSchedProdVal, 
                    bool AddSchedTestVal, 
                    bool AddUserDevVal, 
                    bool AddUserProdVal, 
                    bool AddUserTestVal, 
                    bool AddRobotDevVal, 
                    bool AddRobotProdVal, 
                    bool AddRobotTestVal, 
                    bool AddQDevVal, 
                    bool AddQProdVal, 
                    bool AddQTestVal, 
                    bool AddGroupDevVal, 
                    bool AddGroupProdVal, 
                    bool AddGroupTestVal, 
                    bool AddQueToBotDevVal, 
                    bool AddQueToBotProdVal, 
                    bool AddQueToBotTestVal, 
                    bool AddBotToUserDevVal, 
                    bool AddBotToUserProdVal, 
                    bool AddBotToUserTestVal, 
                    bool BotLogDevVal, 
                    bool BotLogProdVal, 
                    bool BotLogTestVal, 
                    bool AuditTrailDevVal, 
                    bool AuditTrailProdVal, 
                    bool AuditTrailTestVal, 
                    int groupid, 
                    int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/UpdateCustomRoleBasedAccess", ReplyAction="http://tempuri.org/IBOTService/UpdateCustomRoleBasedAccessResponse")]
        System.Threading.Tasks.Task<int> UpdateCustomRoleBasedAccessAsync(
                    bool QDetailsDevVal, 
                    bool QDetailsProdVal, 
                    bool QDetailsTestVal, 
                    bool AddSchedDevVal, 
                    bool AddSchedProdVal, 
                    bool AddSchedTestVal, 
                    bool AddUserDevVal, 
                    bool AddUserProdVal, 
                    bool AddUserTestVal, 
                    bool AddRobotDevVal, 
                    bool AddRobotProdVal, 
                    bool AddRobotTestVal, 
                    bool AddQDevVal, 
                    bool AddQProdVal, 
                    bool AddQTestVal, 
                    bool AddGroupDevVal, 
                    bool AddGroupProdVal, 
                    bool AddGroupTestVal, 
                    bool AddQueToBotDevVal, 
                    bool AddQueToBotProdVal, 
                    bool AddQueToBotTestVal, 
                    bool AddBotToUserDevVal, 
                    bool AddBotToUserProdVal, 
                    bool AddBotToUserTestVal, 
                    bool BotLogDevVal, 
                    bool BotLogProdVal, 
                    bool BotLogTestVal, 
                    bool AuditTrailDevVal, 
                    bool AuditTrailProdVal, 
                    bool AuditTrailTestVal, 
                    int groupid, 
                    int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetCustomRoleBasedAccess", ReplyAction="http://tempuri.org/IBOTService/GetCustomRoleBasedAccessResponse")]
        System.Data.DataTable GetCustomRoleBasedAccess(int groupid, int iTenantId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetCustomRoleBasedAccess", ReplyAction="http://tempuri.org/IBOTService/GetCustomRoleBasedAccessResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetCustomRoleBasedAccessAsync(int groupid, int iTenantId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/LoginUser", ReplyAction="http://tempuri.org/IBOTService/LoginUserResponse")]
        System.Data.DataTable LoginUser(string domainname, string userid, string pwd, string tenantName, string groupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/LoginUser", ReplyAction="http://tempuri.org/IBOTService/LoginUserResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> LoginUserAsync(string domainname, string userid, string pwd, string tenantName, string groupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AssignBotToUser", ReplyAction="http://tempuri.org/IBOTService/AssignBotToUserResponse")]
        int AssignBotToUser(string strBotId, string strUserId, string createdby, int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AssignBotToUser", ReplyAction="http://tempuri.org/IBOTService/AssignBotToUserResponse")]
        System.Threading.Tasks.Task<int> AssignBotToUserAsync(string strBotId, string strUserId, string createdby, int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AssignQueueToBot", ReplyAction="http://tempuri.org/IBOTService/AssignQueueToBotResponse")]
        int AssignQueueToBot(string strBotId, string queuename, string createdby, int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/AssignQueueToBot", ReplyAction="http://tempuri.org/IBOTService/AssignQueueToBotResponse")]
        System.Threading.Tasks.Task<int> AssignQueueToBotAsync(string strBotId, string queuename, string createdby, int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetBots", ReplyAction="http://tempuri.org/IBOTService/GetBotsResponse")]
        System.Data.DataTable GetBots(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetBots", ReplyAction="http://tempuri.org/IBOTService/GetBotsResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetBotsAsync(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetGroups", ReplyAction="http://tempuri.org/IBOTService/GetGroupsResponse")]
        System.Data.DataTable GetGroups(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetGroups", ReplyAction="http://tempuri.org/IBOTService/GetGroupsResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetGroupsAsync(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetConfigParameters", ReplyAction="http://tempuri.org/IBOTService/GetConfigParametersResponse")]
        System.Data.DataTable GetConfigParameters(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetConfigParameters", ReplyAction="http://tempuri.org/IBOTService/GetConfigParametersResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetConfigParametersAsync(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetQueues", ReplyAction="http://tempuri.org/IBOTService/GetQueuesResponse")]
        System.Data.DataTable GetQueues(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetQueues", ReplyAction="http://tempuri.org/IBOTService/GetQueuesResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetQueuesAsync(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetDashboardBots", ReplyAction="http://tempuri.org/IBOTService/GetDashboardBotsResponse")]
        System.Data.DataTable GetDashboardBots(int groupid, int tenantid, string userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetDashboardBots", ReplyAction="http://tempuri.org/IBOTService/GetDashboardBotsResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetDashboardBotsAsync(int groupid, int tenantid, string userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetQueueToBotMapping", ReplyAction="http://tempuri.org/IBOTService/GetQueueToBotMappingResponse")]
        System.Data.DataTable GetQueueToBotMapping(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetQueueToBotMapping", ReplyAction="http://tempuri.org/IBOTService/GetQueueToBotMappingResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetQueueToBotMappingAsync(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetUserToBotMapping", ReplyAction="http://tempuri.org/IBOTService/GetUserToBotMappingResponse")]
        System.Data.DataTable GetUserToBotMapping(string userid, int groupid, int TenantId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetUserToBotMapping", ReplyAction="http://tempuri.org/IBOTService/GetUserToBotMappingResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetUserToBotMappingAsync(string userid, int groupid, int TenantId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetBotStartDetails", ReplyAction="http://tempuri.org/IBOTService/GetBotStartDetailsResponse")]
        System.Data.DataTable GetBotStartDetails(string botname, string MachineName, int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetBotStartDetails", ReplyAction="http://tempuri.org/IBOTService/GetBotStartDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetBotStartDetailsAsync(string botname, string MachineName, int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetBotStartDetailsFromDesktop", ReplyAction="http://tempuri.org/IBOTService/GetBotStartDetailsFromDesktopResponse")]
        System.Data.DataTable GetBotStartDetailsFromDesktop(string userid, string machinename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetBotStartDetailsFromDesktop", ReplyAction="http://tempuri.org/IBOTService/GetBotStartDetailsFromDesktopResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetBotStartDetailsFromDesktopAsync(string userid, string machinename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetStompDetails", ReplyAction="http://tempuri.org/IBOTService/GetStompDetailsResponse")]
        System.Data.DataTable GetStompDetails(string botid, int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetStompDetails", ReplyAction="http://tempuri.org/IBOTService/GetStompDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetStompDetailsAsync(string botid, int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetRQDetails", ReplyAction="http://tempuri.org/IBOTService/GetRQDetailsResponse")]
        System.Data.DataTable GetRQDetails(string botid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetRQDetails", ReplyAction="http://tempuri.org/IBOTService/GetRQDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetRQDetailsAsync(string botid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetLogsForDashboardBots", ReplyAction="http://tempuri.org/IBOTService/GetLogsForDashboardBotsResponse")]
        System.Data.DataTable GetLogsForDashboardBots(string strbotid, string strmachinename, int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetLogsForDashboardBots", ReplyAction="http://tempuri.org/IBOTService/GetLogsForDashboardBotsResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetLogsForDashboardBotsAsync(string strbotid, string strmachinename, int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetUsers", ReplyAction="http://tempuri.org/IBOTService/GetUsersResponse")]
        System.Data.DataTable GetUsers(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetUsers", ReplyAction="http://tempuri.org/IBOTService/GetUsersResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetUsersAsync(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetAllTenants", ReplyAction="http://tempuri.org/IBOTService/GetAllTenantsResponse")]
        System.Data.DataTable GetAllTenants(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetAllTenants", ReplyAction="http://tempuri.org/IBOTService/GetAllTenantsResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetAllTenantsAsync(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/InsertIntoLogger", ReplyAction="http://tempuri.org/IBOTService/InsertIntoLoggerResponse")]
        int InsertIntoLogger(string MachineName, string UserName, string RobotName, string ProcessName, System.DateTime dateUtc, string Logger, string Message, int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/InsertIntoLogger", ReplyAction="http://tempuri.org/IBOTService/InsertIntoLoggerResponse")]
        System.Threading.Tasks.Task<int> InsertIntoLoggerAsync(string MachineName, string UserName, string RobotName, string ProcessName, System.DateTime dateUtc, string Logger, string Message, int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetLog", ReplyAction="http://tempuri.org/IBOTService/GetLogResponse")]
        System.Data.DataTable GetLog(string userid, int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetLog", ReplyAction="http://tempuri.org/IBOTService/GetLogResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetLogAsync(string userid, int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetAuditTrail", ReplyAction="http://tempuri.org/IBOTService/GetAuditTrailResponse")]
        System.Data.DataTable GetAuditTrail(int groupid, int tenantid, string userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetAuditTrail", ReplyAction="http://tempuri.org/IBOTService/GetAuditTrailResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetAuditTrailAsync(int groupid, int tenantid, string userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetData", ReplyAction="http://tempuri.org/IBOTService/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetData", ReplyAction="http://tempuri.org/IBOTService/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IBOTService/GetDataUsingDataContractResponse")]
        AutomationService.ServiceReference1.CompositeType GetDataUsingDataContract(AutomationService.ServiceReference1.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IBOTService/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<AutomationService.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(AutomationService.ServiceReference1.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/LogDataToDB", ReplyAction="http://tempuri.org/IBOTService/LogDataToDBResponse")]
        void LogDataToDB(System.Data.DataTable LogData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/LogDataToDB", ReplyAction="http://tempuri.org/IBOTService/LogDataToDBResponse")]
        System.Threading.Tasks.Task LogDataToDBAsync(System.Data.DataTable LogData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetProcessDetails", ReplyAction="http://tempuri.org/IBOTService/GetProcessDetailsResponse")]
        System.Data.DataTable GetProcessDetails(string ProcessName, string groupname, string tenantname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetProcessDetails", ReplyAction="http://tempuri.org/IBOTService/GetProcessDetailsResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetProcessDetailsAsync(string ProcessName, string groupname, string tenantname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DownloadAutomationZipBinary", ReplyAction="http://tempuri.org/IBOTService/DownloadAutomationZipBinaryResponse")]
        System.Data.DataTable DownloadAutomationZipBinary(string ProcessName, string ProcessVersion, string AutomationGroupName, string TenantName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/DownloadAutomationZipBinary", ReplyAction="http://tempuri.org/IBOTService/DownloadAutomationZipBinaryResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> DownloadAutomationZipBinaryAsync(string ProcessName, string ProcessVersion, string AutomationGroupName, string TenantName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetProcessDataWitoutZipFile", ReplyAction="http://tempuri.org/IBOTService/GetProcessDataWitoutZipFileResponse")]
        System.Data.DataTable GetProcessDataWitoutZipFile(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/GetProcessDataWitoutZipFile", ReplyAction="http://tempuri.org/IBOTService/GetProcessDataWitoutZipFileResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetProcessDataWitoutZipFileAsync(int groupid, int tenantid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/LoadProcessVersion", ReplyAction="http://tempuri.org/IBOTService/LoadProcessVersionResponse")]
        System.Data.DataTable LoadProcessVersion(int groupid, int tenantid, string ProcessId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOTService/LoadProcessVersion", ReplyAction="http://tempuri.org/IBOTService/LoadProcessVersionResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> LoadProcessVersionAsync(int groupid, int tenantid, string ProcessId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBOTServiceChannel : AutomationService.ServiceReference1.IBOTService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BOTServiceClient : System.ServiceModel.ClientBase<AutomationService.ServiceReference1.IBOTService>, AutomationService.ServiceReference1.IBOTService {
        
        public BOTServiceClient() {
        }
        
        public BOTServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BOTServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BOTServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BOTServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int AddSchedule(string strQueueName, string strBotName, string strChronExp, string stopAfter, int groupid, int tenantid, string createdby) {
            return base.Channel.AddSchedule(strQueueName, strBotName, strChronExp, stopAfter, groupid, tenantid, createdby);
        }
        
        public System.Threading.Tasks.Task<int> AddScheduleAsync(string strQueueName, string strBotName, string strChronExp, string stopAfter, int groupid, int tenantid, string createdby) {
            return base.Channel.AddScheduleAsync(strQueueName, strBotName, strChronExp, stopAfter, groupid, tenantid, createdby);
        }
        
        public int AddQueueDetails(string queueName, int groupid, int iTenantID, string createdby) {
            return base.Channel.AddQueueDetails(queueName, groupid, iTenantID, createdby);
        }
        
        public System.Threading.Tasks.Task<int> AddQueueDetailsAsync(string queueName, int groupid, int iTenantID, string createdby) {
            return base.Channel.AddQueueDetailsAsync(queueName, groupid, iTenantID, createdby);
        }
        
        public int DeleteSchedule(string strId, string strQueueName, string strBotName, string strChronExp, int groupid, int tenantid, string createdby) {
            return base.Channel.DeleteSchedule(strId, strQueueName, strBotName, strChronExp, groupid, tenantid, createdby);
        }
        
        public System.Threading.Tasks.Task<int> DeleteScheduleAsync(string strId, string strQueueName, string strBotName, string strChronExp, int groupid, int tenantid, string createdby) {
            return base.Channel.DeleteScheduleAsync(strId, strQueueName, strBotName, strChronExp, groupid, tenantid, createdby);
        }
        
        public System.Data.DataTable GetSchedules(int groupid, int tenantid) {
            return base.Channel.GetSchedules(groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetSchedulesAsync(int groupid, int tenantid) {
            return base.Channel.GetSchedulesAsync(groupid, tenantid);
        }
        
        public bool AutomationRequest(CommonLibrary.RequestInput _requestInput) {
            return base.Channel.AutomationRequest(_requestInput);
        }
        
        public System.Threading.Tasks.Task<bool> AutomationRequestAsync(CommonLibrary.RequestInput _requestInput) {
            return base.Channel.AutomationRequestAsync(_requestInput);
        }
        
        public int AddUser(string domainname, string userid, string pwd, int groupid, int tenantid, string strUserRole, string createdby) {
            return base.Channel.AddUser(domainname, userid, pwd, groupid, tenantid, strUserRole, createdby);
        }
        
        public System.Threading.Tasks.Task<int> AddUserAsync(string domainname, string userid, string pwd, int groupid, int tenantid, string strUserRole, string createdby) {
            return base.Channel.AddUserAsync(domainname, userid, pwd, groupid, tenantid, strUserRole, createdby);
        }
        
        public int AddTenant(string TenantName, string owner, int groupid, int iTenantId, string createdBy) {
            return base.Channel.AddTenant(TenantName, owner, groupid, iTenantId, createdBy);
        }
        
        public System.Threading.Tasks.Task<int> AddTenantAsync(string TenantName, string owner, int groupid, int iTenantId, string createdBy) {
            return base.Channel.AddTenantAsync(TenantName, owner, groupid, iTenantId, createdBy);
        }
        
        public int DeleteTenant(int groupid, int TenantId, string CurrentUser) {
            return base.Channel.DeleteTenant(groupid, TenantId, CurrentUser);
        }
        
        public System.Threading.Tasks.Task<int> DeleteTenantAsync(int groupid, int TenantId, string CurrentUser) {
            return base.Channel.DeleteTenantAsync(groupid, TenantId, CurrentUser);
        }
        
        public int GetTenantId(int groupid, int tenantid, string TenantName) {
            return base.Channel.GetTenantId(groupid, tenantid, TenantName);
        }
        
        public System.Threading.Tasks.Task<int> GetTenantIdAsync(int groupid, int tenantid, string TenantName) {
            return base.Channel.GetTenantIdAsync(groupid, tenantid, TenantName);
        }
        
        public int AddGroup(string groupName, int groupid, int tenantid, string createdby) {
            return base.Channel.AddGroup(groupName, groupid, tenantid, createdby);
        }
        
        public System.Threading.Tasks.Task<int> AddGroupAsync(string groupName, int groupid, int tenantid, string createdby) {
            return base.Channel.AddGroupAsync(groupName, groupid, tenantid, createdby);
        }
        
        public int DeleteGroup(string strId, int groupid, int tenantid, string createdby) {
            return base.Channel.DeleteGroup(strId, groupid, tenantid, createdby);
        }
        
        public System.Threading.Tasks.Task<int> DeleteGroupAsync(string strId, int groupid, int tenantid, string createdby) {
            return base.Channel.DeleteGroupAsync(strId, groupid, tenantid, createdby);
        }
        
        public int UpdateDefaultVersion(int iTenantId, int groupid, string ProcessId, string updatedVersion, bool isLatest) {
            return base.Channel.UpdateDefaultVersion(iTenantId, groupid, ProcessId, updatedVersion, isLatest);
        }
        
        public System.Threading.Tasks.Task<int> UpdateDefaultVersionAsync(int iTenantId, int groupid, string ProcessId, string updatedVersion, bool isLatest) {
            return base.Channel.UpdateDefaultVersionAsync(iTenantId, groupid, ProcessId, updatedVersion, isLatest);
        }
        
        public int AddProcess(string ProcessName, int EnvironmentName, int groupid, int tenantid, string ProcessVersion, bool latestVersion, string createdBy) {
            return base.Channel.AddProcess(ProcessName, EnvironmentName, groupid, tenantid, ProcessVersion, latestVersion, createdBy);
        }
        
        public System.Threading.Tasks.Task<int> AddProcessAsync(string ProcessName, int EnvironmentName, int groupid, int tenantid, string ProcessVersion, bool latestVersion, string createdBy) {
            return base.Channel.AddProcessAsync(ProcessName, EnvironmentName, groupid, tenantid, ProcessVersion, latestVersion, createdBy);
        }
        
        public int AddProcessWithZip(string ProcessName, int groupid, int TenantId, string ProcessVersion, bool LatestVersion, string createdBy, byte[] ZipDataFile) {
            return base.Channel.AddProcessWithZip(ProcessName, groupid, TenantId, ProcessVersion, LatestVersion, createdBy, ZipDataFile);
        }
        
        public System.Threading.Tasks.Task<int> AddProcessWithZipAsync(string ProcessName, int groupid, int TenantId, string ProcessVersion, bool LatestVersion, string createdBy, byte[] ZipDataFile) {
            return base.Channel.AddProcessWithZipAsync(ProcessName, groupid, TenantId, ProcessVersion, LatestVersion, createdBy, ZipDataFile);
        }
        
        public int AddBot(string strBotName, string strBotId, string pwd, string botkey, string strMachineName, int groupid, int tenantid, string createdby) {
            return base.Channel.AddBot(strBotName, strBotId, pwd, botkey, strMachineName, groupid, tenantid, createdby);
        }
        
        public System.Threading.Tasks.Task<int> AddBotAsync(string strBotName, string strBotId, string pwd, string botkey, string strMachineName, int groupid, int tenantid, string createdby) {
            return base.Channel.AddBotAsync(strBotName, strBotId, pwd, botkey, strMachineName, groupid, tenantid, createdby);
        }
        
        public int AddConfigParameters(string strParameterName, string strParameterValue, int iAccessLevelProcessId, int groupid, int tenantid, string createdby) {
            return base.Channel.AddConfigParameters(strParameterName, strParameterValue, iAccessLevelProcessId, groupid, tenantid, createdby);
        }
        
        public System.Threading.Tasks.Task<int> AddConfigParametersAsync(string strParameterName, string strParameterValue, int iAccessLevelProcessId, int groupid, int tenantid, string createdby) {
            return base.Channel.AddConfigParametersAsync(strParameterName, strParameterValue, iAccessLevelProcessId, groupid, tenantid, createdby);
        }
        
        public int DeleteConfigParameters(int iParameterId, int groupid, int tenantid, string strCurrentUser) {
            return base.Channel.DeleteConfigParameters(iParameterId, groupid, tenantid, strCurrentUser);
        }
        
        public System.Threading.Tasks.Task<int> DeleteConfigParametersAsync(int iParameterId, int groupid, int tenantid, string strCurrentUser) {
            return base.Channel.DeleteConfigParametersAsync(iParameterId, groupid, tenantid, strCurrentUser);
        }
        
        public int DeleteBot(string strId, int groupid, int tenantid, string createdby) {
            return base.Channel.DeleteBot(strId, groupid, tenantid, createdby);
        }
        
        public System.Threading.Tasks.Task<int> DeleteBotAsync(string strId, int groupid, int tenantid, string createdby) {
            return base.Channel.DeleteBotAsync(strId, groupid, tenantid, createdby);
        }
        
        public int DeleteUser(string strId, int groupid, int tenantid, string createdby) {
            return base.Channel.DeleteUser(strId, groupid, tenantid, createdby);
        }
        
        public System.Threading.Tasks.Task<int> DeleteUserAsync(string strId, int groupid, int tenantid, string createdby) {
            return base.Channel.DeleteUserAsync(strId, groupid, tenantid, createdby);
        }
        
        public int DeleteProcess(string strId, int groupid, int tenantid, string createdby) {
            return base.Channel.DeleteProcess(strId, groupid, tenantid, createdby);
        }
        
        public System.Threading.Tasks.Task<int> DeleteProcessAsync(string strId, int groupid, int tenantid, string createdby) {
            return base.Channel.DeleteProcessAsync(strId, groupid, tenantid, createdby);
        }
        
        public int DeleteProcessVersion(string strProcessId, string strProcessName, string strProcessVersion, int groupid, int tenantid, string createdby) {
            return base.Channel.DeleteProcessVersion(strProcessId, strProcessName, strProcessVersion, groupid, tenantid, createdby);
        }
        
        public System.Threading.Tasks.Task<int> DeleteProcessVersionAsync(string strProcessId, string strProcessName, string strProcessVersion, int groupid, int tenantid, string createdby) {
            return base.Channel.DeleteProcessVersionAsync(strProcessId, strProcessName, strProcessVersion, groupid, tenantid, createdby);
        }
        
        public int DeleteQueueToBotMapping(string strBotId, int groupid, int tenantid, string createdby) {
            return base.Channel.DeleteQueueToBotMapping(strBotId, groupid, tenantid, createdby);
        }
        
        public System.Threading.Tasks.Task<int> DeleteQueueToBotMappingAsync(string strBotId, int groupid, int tenantid, string createdby) {
            return base.Channel.DeleteQueueToBotMappingAsync(strBotId, groupid, tenantid, createdby);
        }
        
        public int DeleteUserToBotMapping(string strId, int groupid, int tenantid, string createdby) {
            return base.Channel.DeleteUserToBotMapping(strId, groupid, tenantid, createdby);
        }
        
        public System.Threading.Tasks.Task<int> DeleteUserToBotMappingAsync(string strId, int groupid, int tenantid, string createdby) {
            return base.Channel.DeleteUserToBotMappingAsync(strId, groupid, tenantid, createdby);
        }
        
        public int UpdateCustomRoleBasedAccess(
                    bool QDetailsDevVal, 
                    bool QDetailsProdVal, 
                    bool QDetailsTestVal, 
                    bool AddSchedDevVal, 
                    bool AddSchedProdVal, 
                    bool AddSchedTestVal, 
                    bool AddUserDevVal, 
                    bool AddUserProdVal, 
                    bool AddUserTestVal, 
                    bool AddRobotDevVal, 
                    bool AddRobotProdVal, 
                    bool AddRobotTestVal, 
                    bool AddQDevVal, 
                    bool AddQProdVal, 
                    bool AddQTestVal, 
                    bool AddGroupDevVal, 
                    bool AddGroupProdVal, 
                    bool AddGroupTestVal, 
                    bool AddQueToBotDevVal, 
                    bool AddQueToBotProdVal, 
                    bool AddQueToBotTestVal, 
                    bool AddBotToUserDevVal, 
                    bool AddBotToUserProdVal, 
                    bool AddBotToUserTestVal, 
                    bool BotLogDevVal, 
                    bool BotLogProdVal, 
                    bool BotLogTestVal, 
                    bool AuditTrailDevVal, 
                    bool AuditTrailProdVal, 
                    bool AuditTrailTestVal, 
                    int groupid, 
                    int tenantid) {
            return base.Channel.UpdateCustomRoleBasedAccess(QDetailsDevVal, QDetailsProdVal, QDetailsTestVal, AddSchedDevVal, AddSchedProdVal, AddSchedTestVal, AddUserDevVal, AddUserProdVal, AddUserTestVal, AddRobotDevVal, AddRobotProdVal, AddRobotTestVal, AddQDevVal, AddQProdVal, AddQTestVal, AddGroupDevVal, AddGroupProdVal, AddGroupTestVal, AddQueToBotDevVal, AddQueToBotProdVal, AddQueToBotTestVal, AddBotToUserDevVal, AddBotToUserProdVal, AddBotToUserTestVal, BotLogDevVal, BotLogProdVal, BotLogTestVal, AuditTrailDevVal, AuditTrailProdVal, AuditTrailTestVal, groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<int> UpdateCustomRoleBasedAccessAsync(
                    bool QDetailsDevVal, 
                    bool QDetailsProdVal, 
                    bool QDetailsTestVal, 
                    bool AddSchedDevVal, 
                    bool AddSchedProdVal, 
                    bool AddSchedTestVal, 
                    bool AddUserDevVal, 
                    bool AddUserProdVal, 
                    bool AddUserTestVal, 
                    bool AddRobotDevVal, 
                    bool AddRobotProdVal, 
                    bool AddRobotTestVal, 
                    bool AddQDevVal, 
                    bool AddQProdVal, 
                    bool AddQTestVal, 
                    bool AddGroupDevVal, 
                    bool AddGroupProdVal, 
                    bool AddGroupTestVal, 
                    bool AddQueToBotDevVal, 
                    bool AddQueToBotProdVal, 
                    bool AddQueToBotTestVal, 
                    bool AddBotToUserDevVal, 
                    bool AddBotToUserProdVal, 
                    bool AddBotToUserTestVal, 
                    bool BotLogDevVal, 
                    bool BotLogProdVal, 
                    bool BotLogTestVal, 
                    bool AuditTrailDevVal, 
                    bool AuditTrailProdVal, 
                    bool AuditTrailTestVal, 
                    int groupid, 
                    int tenantid) {
            return base.Channel.UpdateCustomRoleBasedAccessAsync(QDetailsDevVal, QDetailsProdVal, QDetailsTestVal, AddSchedDevVal, AddSchedProdVal, AddSchedTestVal, AddUserDevVal, AddUserProdVal, AddUserTestVal, AddRobotDevVal, AddRobotProdVal, AddRobotTestVal, AddQDevVal, AddQProdVal, AddQTestVal, AddGroupDevVal, AddGroupProdVal, AddGroupTestVal, AddQueToBotDevVal, AddQueToBotProdVal, AddQueToBotTestVal, AddBotToUserDevVal, AddBotToUserProdVal, AddBotToUserTestVal, BotLogDevVal, BotLogProdVal, BotLogTestVal, AuditTrailDevVal, AuditTrailProdVal, AuditTrailTestVal, groupid, tenantid);
        }
        
        public System.Data.DataTable GetCustomRoleBasedAccess(int groupid, int iTenantId) {
            return base.Channel.GetCustomRoleBasedAccess(groupid, iTenantId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetCustomRoleBasedAccessAsync(int groupid, int iTenantId) {
            return base.Channel.GetCustomRoleBasedAccessAsync(groupid, iTenantId);
        }
        
        public System.Data.DataTable LoginUser(string domainname, string userid, string pwd, string tenantName, string groupName) {
            return base.Channel.LoginUser(domainname, userid, pwd, tenantName, groupName);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> LoginUserAsync(string domainname, string userid, string pwd, string tenantName, string groupName) {
            return base.Channel.LoginUserAsync(domainname, userid, pwd, tenantName, groupName);
        }
        
        public int AssignBotToUser(string strBotId, string strUserId, string createdby, int groupid, int tenantid) {
            return base.Channel.AssignBotToUser(strBotId, strUserId, createdby, groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<int> AssignBotToUserAsync(string strBotId, string strUserId, string createdby, int groupid, int tenantid) {
            return base.Channel.AssignBotToUserAsync(strBotId, strUserId, createdby, groupid, tenantid);
        }
        
        public int AssignQueueToBot(string strBotId, string queuename, string createdby, int groupid, int tenantid) {
            return base.Channel.AssignQueueToBot(strBotId, queuename, createdby, groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<int> AssignQueueToBotAsync(string strBotId, string queuename, string createdby, int groupid, int tenantid) {
            return base.Channel.AssignQueueToBotAsync(strBotId, queuename, createdby, groupid, tenantid);
        }
        
        public System.Data.DataTable GetBots(int groupid, int tenantid) {
            return base.Channel.GetBots(groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetBotsAsync(int groupid, int tenantid) {
            return base.Channel.GetBotsAsync(groupid, tenantid);
        }
        
        public System.Data.DataTable GetGroups(int groupid, int tenantid) {
            return base.Channel.GetGroups(groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetGroupsAsync(int groupid, int tenantid) {
            return base.Channel.GetGroupsAsync(groupid, tenantid);
        }
        
        public System.Data.DataTable GetConfigParameters(int groupid, int tenantid) {
            return base.Channel.GetConfigParameters(groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetConfigParametersAsync(int groupid, int tenantid) {
            return base.Channel.GetConfigParametersAsync(groupid, tenantid);
        }
        
        public System.Data.DataTable GetQueues(int groupid, int tenantid) {
            return base.Channel.GetQueues(groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetQueuesAsync(int groupid, int tenantid) {
            return base.Channel.GetQueuesAsync(groupid, tenantid);
        }
        
        public System.Data.DataTable GetDashboardBots(int groupid, int tenantid, string userid) {
            return base.Channel.GetDashboardBots(groupid, tenantid, userid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetDashboardBotsAsync(int groupid, int tenantid, string userid) {
            return base.Channel.GetDashboardBotsAsync(groupid, tenantid, userid);
        }
        
        public System.Data.DataTable GetQueueToBotMapping(int groupid, int tenantid) {
            return base.Channel.GetQueueToBotMapping(groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetQueueToBotMappingAsync(int groupid, int tenantid) {
            return base.Channel.GetQueueToBotMappingAsync(groupid, tenantid);
        }
        
        public System.Data.DataTable GetUserToBotMapping(string userid, int groupid, int TenantId) {
            return base.Channel.GetUserToBotMapping(userid, groupid, TenantId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetUserToBotMappingAsync(string userid, int groupid, int TenantId) {
            return base.Channel.GetUserToBotMappingAsync(userid, groupid, TenantId);
        }
        
        public System.Data.DataTable GetBotStartDetails(string botname, string MachineName, int groupid, int tenantid) {
            return base.Channel.GetBotStartDetails(botname, MachineName, groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetBotStartDetailsAsync(string botname, string MachineName, int groupid, int tenantid) {
            return base.Channel.GetBotStartDetailsAsync(botname, MachineName, groupid, tenantid);
        }
        
        public System.Data.DataTable GetBotStartDetailsFromDesktop(string userid, string machinename) {
            return base.Channel.GetBotStartDetailsFromDesktop(userid, machinename);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetBotStartDetailsFromDesktopAsync(string userid, string machinename) {
            return base.Channel.GetBotStartDetailsFromDesktopAsync(userid, machinename);
        }
        
        public System.Data.DataTable GetStompDetails(string botid, int groupid, int tenantid) {
            return base.Channel.GetStompDetails(botid, groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetStompDetailsAsync(string botid, int groupid, int tenantid) {
            return base.Channel.GetStompDetailsAsync(botid, groupid, tenantid);
        }
        
        public System.Data.DataTable GetRQDetails(string botid) {
            return base.Channel.GetRQDetails(botid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetRQDetailsAsync(string botid) {
            return base.Channel.GetRQDetailsAsync(botid);
        }
        
        public System.Data.DataTable GetLogsForDashboardBots(string strbotid, string strmachinename, int groupid, int tenantid) {
            return base.Channel.GetLogsForDashboardBots(strbotid, strmachinename, groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetLogsForDashboardBotsAsync(string strbotid, string strmachinename, int groupid, int tenantid) {
            return base.Channel.GetLogsForDashboardBotsAsync(strbotid, strmachinename, groupid, tenantid);
        }
        
        public System.Data.DataTable GetUsers(int groupid, int tenantid) {
            return base.Channel.GetUsers(groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetUsersAsync(int groupid, int tenantid) {
            return base.Channel.GetUsersAsync(groupid, tenantid);
        }
        
        public System.Data.DataTable GetAllTenants(int groupid, int tenantid) {
            return base.Channel.GetAllTenants(groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetAllTenantsAsync(int groupid, int tenantid) {
            return base.Channel.GetAllTenantsAsync(groupid, tenantid);
        }
        
        public int InsertIntoLogger(string MachineName, string UserName, string RobotName, string ProcessName, System.DateTime dateUtc, string Logger, string Message, int groupid, int tenantid) {
            return base.Channel.InsertIntoLogger(MachineName, UserName, RobotName, ProcessName, dateUtc, Logger, Message, groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<int> InsertIntoLoggerAsync(string MachineName, string UserName, string RobotName, string ProcessName, System.DateTime dateUtc, string Logger, string Message, int groupid, int tenantid) {
            return base.Channel.InsertIntoLoggerAsync(MachineName, UserName, RobotName, ProcessName, dateUtc, Logger, Message, groupid, tenantid);
        }
        
        public System.Data.DataTable GetLog(string userid, int groupid, int tenantid) {
            return base.Channel.GetLog(userid, groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetLogAsync(string userid, int groupid, int tenantid) {
            return base.Channel.GetLogAsync(userid, groupid, tenantid);
        }
        
        public System.Data.DataTable GetAuditTrail(int groupid, int tenantid, string userid) {
            return base.Channel.GetAuditTrail(groupid, tenantid, userid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetAuditTrailAsync(int groupid, int tenantid, string userid) {
            return base.Channel.GetAuditTrailAsync(groupid, tenantid, userid);
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public AutomationService.ServiceReference1.CompositeType GetDataUsingDataContract(AutomationService.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<AutomationService.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(AutomationService.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public void LogDataToDB(System.Data.DataTable LogData) {
            base.Channel.LogDataToDB(LogData);
        }
        
        public System.Threading.Tasks.Task LogDataToDBAsync(System.Data.DataTable LogData) {
            return base.Channel.LogDataToDBAsync(LogData);
        }
        
        public System.Data.DataTable GetProcessDetails(string ProcessName, string groupname, string tenantname) {
            return base.Channel.GetProcessDetails(ProcessName, groupname, tenantname);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetProcessDetailsAsync(string ProcessName, string groupname, string tenantname) {
            return base.Channel.GetProcessDetailsAsync(ProcessName, groupname, tenantname);
        }
        
        public System.Data.DataTable DownloadAutomationZipBinary(string ProcessName, string ProcessVersion, string AutomationGroupName, string TenantName) {
            return base.Channel.DownloadAutomationZipBinary(ProcessName, ProcessVersion, AutomationGroupName, TenantName);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> DownloadAutomationZipBinaryAsync(string ProcessName, string ProcessVersion, string AutomationGroupName, string TenantName) {
            return base.Channel.DownloadAutomationZipBinaryAsync(ProcessName, ProcessVersion, AutomationGroupName, TenantName);
        }
        
        public System.Data.DataTable GetProcessDataWitoutZipFile(int groupid, int tenantid) {
            return base.Channel.GetProcessDataWitoutZipFile(groupid, tenantid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetProcessDataWitoutZipFileAsync(int groupid, int tenantid) {
            return base.Channel.GetProcessDataWitoutZipFileAsync(groupid, tenantid);
        }
        
        public System.Data.DataTable LoadProcessVersion(int groupid, int tenantid, string ProcessId) {
            return base.Channel.LoadProcessVersion(groupid, tenantid, ProcessId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> LoadProcessVersionAsync(int groupid, int tenantid, string ProcessId) {
            return base.Channel.LoadProcessVersionAsync(groupid, tenantid, ProcessId);
        }
    }
}
